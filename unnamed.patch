Index: Date4u/.mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/Date4u/.mvn/wrapper/maven-wrapper.properties b/Date4u/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/.mvn/wrapper/maven-wrapper.properties	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,2 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.4/apache-maven-3.9.4-bin.zip
+wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar
Index: Date4u/src/main/java/com/udemy/date4u/configuration/Date4uProperties.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/configuration/Date4uProperties.java b/Date4u/src/main/java/com/udemy/date4u/configuration/Date4uProperties.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/configuration/Date4uProperties.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,33 @@
+package com.udemy.date4u.configuration;
+
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.stereotype.Component;
+
+// Wie im Tutorial beschrieben erstellen wir nun eine eigene Properties-Klasse, die die Hierarchie bei
+// date4u.filesystem.minimum-free-disk-space darstellt.
+@Component
+@ConfigurationProperties("date4u")
+public class Date4uProperties {
+    private FileSystem fileSystem = new FileSystem(); // Falls FileSystem in Properties nicht gefunden wird, referenziere
+    // ich somit sicherheitshalber jedes Mal auf eins.
+
+    public FileSystem getFileSystem() { return fileSystem; }
+
+    public void setFileSystem( FileSystem fileSystem ) { this.fileSystem = fileSystem; }
+
+    public static class FileSystem {
+
+        /*
+        * Required minimum free disk space for local filesystem.
+         */
+        private long minimumFreeDiskSpace = 1_000_000;  // Default value gesetzt, falls Wert in Properties nicht gefunden.
+
+        public long getMinimumFreeDiskSpace() {
+            return minimumFreeDiskSpace;
+        }
+
+        public void setMinimumFreeDiskSpace( long minimumFreeDiskSpace ) {
+            this.minimumFreeDiskSpace = minimumFreeDiskSpace;
+        }
+    }
+}
\ No newline at end of file
Index: Date4u/src/main/java/com/udemy/date4u/core/photo/AwtBicubicThumbnail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/core/photo/AwtBicubicThumbnail.java b/Date4u/src/main/java/com/udemy/date4u/core/photo/AwtBicubicThumbnail.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/core/photo/AwtBicubicThumbnail.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,46 @@
+package com.udemy.date4u.core.photo;
+
+import org.springframework.stereotype.Service;
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.*;
+
+@Service
+public class AwtBicubicThumbnail implements Thumbnail {
+  private static BufferedImage create( BufferedImage source,
+                                       int width, int height ) {
+    double thumbRatio = (double) width / height;
+    double imageRatio = (double) source.getWidth() / source.getHeight();
+    if ( thumbRatio < imageRatio ) height = (int) (width / imageRatio);
+    else width = (int) (height * imageRatio);
+    BufferedImage thumb = new BufferedImage( width, height,
+                                             BufferedImage.TYPE_INT_RGB );
+    Graphics2D g2 = thumb.createGraphics();
+    g2.setRenderingHint( RenderingHints.KEY_INTERPOLATION,
+                         RenderingHints.VALUE_INTERPOLATION_BICUBIC );
+    g2.drawImage( source, 0, 0, width, height, null );
+    g2.dispose();
+    return thumb;
+  }
+
+  // Wir wandeln die Methode thumbnail nun etwas ab, indem wir diese Methode nicht als Methode der Klasse AwtBicubic...
+  // behalten, sondern wir erzeugen eine Schnittstelle "Thumbnail" Interface mit einer Methode thumbnail und wir
+  // implementieren die Schnittstelle in diese Klasse "AtwBic..." Dann überschreiben wir sie und führen die benötigte
+  // Programmierung hier ein.
+  // Warum tun wir das alles?? Damit wir nicht mehr die exakte Klasse Awt... in PhotoService injizieren müssen, sondern
+  // nur den Basistyp Thumbnail. Dadurch verschwindet bei der Injizierung auch die private statische Methode create,
+  // die im PhotoService nichts zu suchen hat, da sie nur zu dieser Klasse gehört.
+  // Diese Vorgehensweise ist bei Spring Boot auch sehr wichtig.
+  @Override
+  public byte[] thumbnail( byte[] imageBytes ) {
+    try ( InputStream is = new ByteArrayInputStream( imageBytes );
+          ByteArrayOutputStream baos = new ByteArrayOutputStream() ) {
+      ImageIO.write( create( ImageIO.read( is ), 200, 200 ), "jpg", baos );
+      return baos.toByteArray();
+    }
+    catch ( IOException e ) {
+      throw new UncheckedIOException( e );
+    }
+  }
+}
\ No newline at end of file
Index: Date4u/src/main/java/com/udemy/date4u/core/photo/PhotoService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/core/photo/PhotoService.java b/Date4u/src/main/java/com/udemy/date4u/core/photo/PhotoService.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/core/photo/PhotoService.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,54 @@
+package com.udemy.date4u.core.photo;
+
+import com.udemy.date4u.core.FileSystem;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.io.File;
+import java.util.Optional;
+import java.util.UUID;
+
+@Service
+public class PhotoService {
+
+    // Erstmal ohne IoC bzw. DI
+    //private final FileSystem fs = new FileSystem();
+
+    // Und nun mit DI:
+    private final FileSystem fs;
+    private final Thumbnail thumbnail;  // hier können wir nun den Basistyp Thumbnail aus der Schnittstelle nehmen
+
+    @Autowired
+    public PhotoService( FileSystem fs, Thumbnail thumbnail ) {  // und hier wird der Basistyp Thumbnail aus der
+        // Schnittstelle injiziert und somit nur die Methode thumbnail hergeholt ohne die private create Methode von Awt
+        this.fs = fs;
+        this.thumbnail = thumbnail;
+    }
+
+    /*
+    Da das FileSystem eine Ausnahme auslöst, falls die Datei nicht vorhanden ist und wir diese nicht haben
+    möchten, wenden wir hierfür einen anderen Rückgabetyp an: Optional vom byte[]
+    Falls die Datei also nicht vorhanden sein sollte, dann wird die Ausnahme abgefangen und auf ein Optional empty
+    gemappt:
+    */
+    public Optional<byte[]> download(String imageName) {
+        try {
+            return Optional.ofNullable(fs.load(imageName + ".jpg"));
+        } catch (Exception e) {
+            return Optional.empty();
+        }
+    }
+
+    public String upload( byte[] imageBytes ) {
+        String imageName = UUID.randomUUID().toString();
+
+        // First: store original image
+        fs.store( imageName + ".jpg", imageBytes );
+
+        // Second: store thumbnail
+        byte[] thumbnailBytes = thumbnail.thumbnail( imageBytes );
+        fs.store( imageName + "-thumb.jpg", thumbnailBytes );
+
+        return imageName;
+    }
+}
Index: Date4u/src/main/java/com/udemy/date4u/core/photo/Thumbnail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/core/photo/Thumbnail.java b/Date4u/src/main/java/com/udemy/date4u/core/photo/Thumbnail.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/core/photo/Thumbnail.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,5 @@
+package com.udemy.date4u.core.photo;
+
+public interface Thumbnail {
+    byte[] thumbnail( byte[] imageBytes );
+}
Index: Date4u/src/main/java/com/udemy/date4u/core/FileSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/core/FileSystem.java b/Date4u/src/main/java/com/udemy/date4u/core/FileSystem.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/core/FileSystem.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,53 @@
+package com.udemy.date4u.core;
+
+import org.springframework.stereotype.Component;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+// mit @Component wird dem Spring Framework mitgeteilt, dass diese Klasse eine Komponente werden soll und
+// automatisch erkannt werden soll. Damit wird die Klasse erzeugt und angemeldet.
+@Service
+public class FileSystem {
+
+    // ein Pfad-Objekt aufbauen, Pfad vom eigenen Benutzerverzeichnis mit Paths.get(System.getProperty...
+    // resolve("fs") erzeugt ein Unterverzeichnis des Benutzerverzeichnisses:
+    private final Path root = Paths.get(System.getProperty("user.home")).resolve("fs");
+    public FileSystem() {
+        // Falls Datei nicht existiert, wird sie erzeugt:
+        if (!Files.isDirectory(root)) {
+            try {
+                Files.createDirectory(root);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    // Freien Speicherplatz zurückgeben:
+    public long getFreeDiskSpace() {
+        return root.toFile().getFreeSpace();
+    }
+
+    // soll etwas von einer Datei laden:
+    public byte[] load(String filename) {
+        try {
+            return Files.readAllBytes(root.resolve(filename));
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    // soll bytes in einer Datei speichern:
+    public void store(String filename, byte[] bytes) {
+        try {
+            Files.write(root.resolve(filename), bytes);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+}
Index: Date4u/src/main/java/com/udemy/date4u/interfaces/shell/FsCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/FsCommands.java b/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/FsCommands.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/FsCommands.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,87 @@
+package com.udemy.date4u.interfaces.shell;
+
+import com.udemy.date4u.configuration.Date4uProperties;
+import com.udemy.date4u.core.FileSystem;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.core.env.Environment;
+import org.springframework.shell.standard.ShellComponent;
+import org.springframework.shell.standard.ShellMethod;
+import org.springframework.util.unit.DataSize;
+
+// Wir bauen uns eine Klasse, um per Konsole (Shell) mit dem laufenden Programm zu interagieren.
+
+// Das ist unsere Klasse für die Shell Anfragen von außen.
+// Spezielle ShellComponent wird implementiert
+@ShellComponent
+public class FsCommands {
+
+    // Da wir DI anwenden, klammern wir das nun aus:
+    // private final FileSystem fs = new FileSystem();
+
+    // Und nun wird FileSystem mit Constructor Injection erzeugt:
+
+    // Wir erzeugen erst eine Variable:
+    private final FileSystem fs;
+    //private final long minimumFreeDiskSpace;
+    //private final Environment env;
+
+    private final Date4uProperties date4uProperties;
+
+    // Mit Autowired wird dieses Bean automatisch mit den anderen Beans vernetzt:
+    @Autowired
+    // nun wird FileSystem in Konstruktor übergeben, sodass FileSystem erst erzeugt werden muss, damit der
+    // Konstruktor ausgeführt werden kann. 1. FileSystem erzeugen, 2. An Konstruktor übergeben und ausführen:
+    public FsCommands( FileSystem fs, Date4uProperties date4uProperties
+            /* @Value( "${date4u.filesystem.minimum-free-disk-space:1000000}") long minimumFreeDiskSpace, Environment env*/ ) {
+        this.fs = fs;
+        // this.minimumFreeDiskSpace = minimumFreeDiskSpace;
+        // this.env = env;
+        this.date4uProperties = date4uProperties;
+    }
+
+    /*
+    Alternativ mit Setter-Injection:
+
+    private FileSystem fs;
+
+    @Autowired
+    public void setFileSystem(FileSystem fs) {
+        this.fs = fs;
+    }
+
+    Alternativ mit Field-Injection
+
+    @Autowired private FileSystem fs; // hier wird @Autowired direkt neben die Variable geschrieben, da wir uns etwas
+    // von der Objekt-Variable wünschen.
+     */
+
+    // Damit diese Methode als Shell Methode erkannt wird, müssen wir noch etwas dafür tun.
+    // Sie braucht eine Dokumentation: Annotation ShellMethod
+    @ShellMethod("Display required free disk space")
+    // Dafür brauchen wir bestimmte Methoden, wie:
+    public long minimumFreeDiskSpace() {
+        //return 1_000_000;
+        // return minimumFreeDiskSpace;
+        // Da wir die Properties nun in einer Klasse als Objekt gemappt haben, fügen wir die Daten auf diese Weise ein:
+        return date4uProperties.getFileSystem().getMinimumFreeDiskSpace();
+    }
+
+    /* Kleine Beispiel Shell Methode, wie wir etwas von außen entgegennehmen
+    @ShellMethod("Lowercase")
+    public String toLowercase(String input) {return input.toLowerCase(Locale.ROOT);}
+    */
+
+    @ShellMethod("Display free disk space")
+    public String freeDiskSpace() {
+        return DataSize.ofBytes(fs.getFreeDiskSpace()).toGigabytes() + " GB";
+    }
+
+    /* Externe Konfiguration und Environment Beispiel:
+    @ShellMethod("Display user home")
+    public String userHome() {
+        return env.getProperty( "user.name" );
+    }
+     */
+
+}
Index: Date4u/src/main/java/com/udemy/date4u/interfaces/shell/PhotoCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/PhotoCommands.java b/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/PhotoCommands.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/interfaces/shell/PhotoCommands.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,59 @@
+package com.udemy.date4u.interfaces.shell;
+
+import com.udemy.date4u.core.photo.PhotoService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.shell.standard.ShellComponent;
+import org.springframework.shell.standard.ShellMethod;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+@ShellComponent
+public class PhotoCommands {
+
+    // Wir versuchen erstmal den Weg ohne Dependency Injection:
+    // private final PhotoService photoService = new PhotoService();
+
+    // Nun das Ganze mit DI:
+    private final PhotoService photoService;
+
+    @Autowired
+    public PhotoCommands(PhotoService photoService) {
+        this.photoService = photoService;
+    }
+
+    // Methode, die die Metadaten eines Fotos anzeigen soll:
+    @ShellMethod("Show photo")  // show-photo
+    String showPhoto(String name) {
+        // Wir rufen den photoService auf und nutzen die download Methode.
+        // Zurückgegeben wird ein Optional. Es enthält entweder ein Foto oder nicht.
+        return photoService.download(name)
+                // Falls die Daten vorhanden sind, können wir diese Daten mit map auf die Metadaten mappen.
+                .map(bytes ->
+                {
+                    // Falls per read Daten nicht gelesen werden können -> try/catch
+                    try {
+                        // die ImageIO hat die Methode read.
+                        // Da die Daten als byte-Array vorliegen, konvertieren wir das byte-Array in einen
+                        // ByteArrayInputStream und speichere es in einer Variable:
+                        var image = ImageIO.read(new ByteArrayInputStream(bytes));
+                        // Die Rückgabe soll nun die Breite und Höhe zurückgeben:
+                        return "Width: " + image.getWidth() + " Height: " + image.getHeight();
+                    } catch (IOException e) {
+                        return "Unable to read image dimensions";
+                    }
+                })
+                // Falls das Bild nicht gefunden wurde:
+                .orElse("Image not found");
+    }
+
+    @ShellMethod("Upload photo")  // upload-photo
+    String uploadPhoto(String filename) throws IOException {
+        byte[] bytes = Files.readAllBytes( Paths.get( filename ) );
+        return "Uploaded " + photoService.upload( bytes );
+    }
+}
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Abstraktionen und Qualifizierungen
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Abstraktionen und Qualifizierungen b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Abstraktionen und Qualifizierungen
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Abstraktionen und Qualifizierungen	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,252 @@
+Abstraktionen und Qualifizierungen
+
+Ein Bean kann gerufen werden, ohne dass man weiß was für ein Typ das ist, nämlich indem man den Namen der Bean zum
+rufen verwendet.
+Ohne explizite Benennung wird der Name automatisch festgelegt:
+- kleingeschriebener @Component-Name
+- Name der @Bean-Fabrikmethode
+
+
+Wir können eine Schnittstelle mit einer Methode erstellen und diese in eine Klasse implementieren (wie wir es mit
+Thumbnail gemacht haben). Die Methode wird dort überschrieben und dann haben wir sogar die Möglichkeit nur den Basistyp,
+also in dem Fall nur diese Schnittstelle per @Autowired zu injizieren und müssen nicht die ganze Klasse injizieren, die
+den gesamten Code enthält (wie bei PhotoService).
+
+
+Das Spring Framework ist auch flexibel, um anhand des Typs zu unterscheiden was genau mit @Autowired gemeint ist.
+Wir können auch generische Typen einsetzen, die besonders parametrisiert sind:
+
+@Configuration
+class SupplierConfiguration {
+    @Bean Supplier<FileSystem> filesystem() {...}
+}
+
+@Component
+class PhotoServiceSupplier implements Supplier<PhotoService> {
+    @Override public PhotoService get() {...}
+}
+
+Injizierung:
+@Autowired Supplier<FileSystem> fs;
+
+Das zeigt uns, dass Spring Boot hier ganz genau hinschaut und genau weiß welchen Supplier mit welchem Typ es injizieren
+muss.
+
+
+Es kann vorkommen, dass Spring Boot nicht weiß welcher Bean verwendet werden soll, wenn die gleiche Schnittstelle
+bei mehreren Beans verwendet wird, welche wir aufgerufen haben oder Beans einfach den gleichen Namen/Typ besitzen, den
+wir aufgerufen haben.
+Dazu gibt es nun folgende Lösungen:
+
+1. @Autowired mit @Qualifier
+Eine Lösung ist die Komponente zu benennen:
+@Service( "quality" )
+class AwtBicubicThumbnail implements Thumbnail { ... }
+
+@Service( "fast" )
+class AwtNearestNeighborThumbnail implements Thumbnail { ... }
+
+Beim Injizieren kann mit der Annotation @Qualifier der Name der gewünschten Komponente angegeben werden:
+
+@Autowired @Qualifier( "quality" )
+public void setThumbnail(Thumbnail thumbnail) {
+    this.thumbnail = thumbnail;
+}
+
+Die Annotation @Qualifier ist auch bei Parametervariablen gültig. Das gilt auch für @Bean-Spring managed Beans.
+
+2. Eigene Annotationstypen
+Alternativ können eigene Annotationstypen als Qualifizierer geschrieben werden.
+Es gibt dazu zwei Optionen:
+- Zwei individuelle Annotationstypen, etwa @ThumbnailRenderingFast und @ThumbnailRenderingQuality hinzufügen.
+- Einen Annotationstyp mit Kriterium, etwa @ThumbnailRendering(FAST) und @ThumbnailRendering(QUALITY) hinzufügen.
+
+Wie das funktioniert lasse ich erstmal aus (Kurs 22. Abstraktionen und Qualifizierungen Teil 2, 9:15min)
+
+3. @Primary
+Falls es mehrere Implementierungen eines Basistyps gibt, kann die Hauptimplementierung mit @Primary annotiert werden.
+
+@Service
+@Primary
+class AwtBicubicThumbnail implements Thumbnail { ... }
+
+@Service
+class AwtNearestNeighborThumbnail implements Thumbnail { ... }
+
+Damit ist das wieder in Ordnung:
+@Autowired
+public void setThumbnail(Thumbnail thumbnail) {
+    this.thumbnail = thumbnail;
+}
+
+4. Alle Beans in einer Datenstruktur
+Wir können aber auch einfach alle diese Beans des gleichen Typs in einer Liste, einem Set, Array etc. speichern:
+@Service
+class AwtBicubicThumbnail implements Thumbnail
+
+@Service AwtNearestNeighborThumbnail implements Thumbnail
+
+@Service
+class Whatever {
+    @Autowired
+    // @Qualifier möglich
+    List<Thumbnail> thumbnails;
+    // oder Set<Thumbnail thumbnails;
+    // oder Thumbnail[] thumbnails;
+}
+
+
+@Resource
+Neben der Spring-Annotation @Autowired unterstützt Spring auch die Annotation @Resource zum Beziehen von benannten
+Ressourcen.
+- @Resource wertet den Namen einer Spring-managed Bean höher als den Typ.
+- Gültig ist @Resource an Objektvariablen oder Settern (mit einem Parameter).
+
+Beispiel:
+
+@Component( "profile" )
+class UnicornProfile { ...}
+
+@Component ( "unicornProfile" )
+class Profile { ... }
+
+und dann die Injizierung:
+@Component
+public class ResourceApplication {
+    @Resource ( name = "profile" )
+    void setABC( Object profile ) { ... }  // in dem Fall wird der Name der Komponente "profile" genutzt
+    // -> class UnicornProfile.
+
+    @Resource (name = "profile" )  // genauso hier bei Field Injection -> Komponente "profile" -> class UnicornProfile.
+    Object abc;
+
+    @Resource  // wird der Name weggelassen, wird er automatisch aus dem Namen im Setter gezogen -> "profile".
+    void setProfile( Object profile ) { ... }
+
+    @Resource  // auch hier wird der Name aus dem Namen "profile" gezogen und die dazugehörige Komponente ausgewählt.
+    Object profile;
+}
+
+Zusammenfassend lässt sich sagen, dass die Anwendung von @Resource das gleiche bewirkt wie @Autowired mit @Qualifier.
+
+
+
+ObjectProvider
+ObjectProvider hatten wir bei optionalen Komponenten kennengelernt. Der Typ wird ähnlich wie Optional verwendet.
+ObjectProvider stellt eine Live Abfrage der Beans aus dem Kontext.
+
+Ein ObjectProvider lässt sich ganz einfach per Autowired injizieren:
+@Autowired
+ObjectProvider<Thumbnail> maybeThumbnail;
+
+// Alternativ kann der ObjectProvider aus einem Applikationskontext geholt werden:
+ObjectProvider<Thumbnail> maybeThumbnail = ctx.getBeanProvider( Thumbnail.class );
+
+// Später:
+
+maybeThumbnail.getIfAvailable();  // die Methode gibt dann zurück: null oder Bean
+// oder:
+maybeThumbnail.getIfAvailable( NoopThumbnail::new );  // wenn kein Bean vorhanden ist, dann kann ich mir selber einen
+// aussuchen.
+
+Es gibt 3 Möglichkeiten bei getIfAvailable:
+1. Bean wird gefunden und instanziiert
+2. Bean wird nicht gefunden, ergibt null (Exception) oder mit Supplier gibt Rückgabe mit neuer Bean
+3. Mehrere passende Beans werden gefunden und geben eine Exception
+
+weitere Methoden von ObjectProvider:
+- ifAvailable(dependencyConsumer: Consumer<T>): void <<default>>
+- getIfUnique(): T
+- getIfUnique(defaultSupplier: Supplier<T>): T <<default>>
+- ifUnique(dependencyConsumer: Consumer<T>): void <<default>>
+- iterator(): Iterator<T> <<default>>
+- stream(): Stream<T> <<default>>
+- orderedStream(): Stream<T> <<default>>
+
+
+@Order / @AutoConfigurationOrder
+Spring berücksichtigt bei gewissen Operationen die Priorität von Objekten.
+- Damit lässt sich z.B. die Reihenfolge der Elemente in der @Autowired-Liste bestimmen:
+    @Autowired List<Thumbnail> thumbnails
+
+Es gibt die folgenden Annotationen, um die Priorität zu bestimmen:
+- @Order (für reguläre Komponenten)
+- @AutoConfigurationOrder (für Konfigurationsklassen)
+
+Beispiel für Thumbnail-Komponenten:
+
+@Component @Order( 178 )  // niedrigste Priorität
+class AwtNearestNeighborThumbnail implements Thumbnail
+
+@Component @Order ( 0 )  // höhere Priorität
+class DefaultThumbnail implements Thumbnail
+
+@Component @Order ( -155 )  // höchste Priorität
+class AwtBicubicThumbnail implements Thumbnail
+
+-> je niedriger die Zahl, umso höher die Priorität
+
+Es gibt noch die Schnittstelle Ordered:
+- Nachteil für @Order: Das Annotationsattribut für die Priorität ist bei @Order immer statisch.
+- Spring wertet bei Komponenten eine Implementierung der Schnittstelle Ordered mit einer Methode int getOrder()
+als Alternative zur Angabe @Order aus.
+    - So lassen sich auch zur Laufzeit dynamisch Vorgänge ermitteln.
+    - Mehr dazu im Video (Kurs 22. Abstraktionen und Qualifizierungen Teil 2, 30:37min)
+
+
+Vererbung, Implementierung von Beans
+Oberklassen können @Bean-Methode besitzen:
+
+abstract class Thing {
+    @Bean UUID uuid() {
+        return UUID.randomUUID();  // Abstrakte Oberklasse besitzt Bean-Methode
+    }
+}
+
+@Configuration class Profile extends Thing { ... }  // Unterklasse erbt die @Bean aus der Oberklasse.
+Das ist problemlos möglich.
+
+Das ist gleichbedeutend wie:
+abstract class Thing { ... }
+
+@Configuration class Profile {
+    @Bean UUID uuid() {
+        return UUID.randomUUID();
+    }
+}
+
+-> Spring Boot ist es egal ob die @Bean-Methoden zur eigenen Klasse gehören oder ob sie geerbt sind.
+
+WICHTIG: Die Oberklasse, von der Beans geerbt werden sollen, darf nicht selbst eine @Component oder @Configuration sein!
+(Das würde im oberen Fall auch keinen Sinn machen, denn von abstrakten Klassen können keine Objekte erzeugt werden.)
+
+Auch bei Schnittstellen gilt das Gleiche:
+
+interface Thing {
+    @Bean default UUID uuid() {
+        return UUID.randomUUID();
+    }
+}
+
+@Component class Profile implements Thing { ... }
+// Auch in diesem Fall wird die @Bean-Methode uuid() von der Schnittstelle problemlos geerbt.
+
+- @Component, @Repository, @Service und @Controller können ihre Eigenschaften nicht vererben!
+Sie tragen keine @Inherited Annotation.
+
+Auch @Autoried in der Oberklasse kann an die Unterklasse vererbt werden:
+
+abstract class Thing {
+    @Autowired ApplicationContext ctx;
+    @Autowired void setArgs( ApplicationArguments args ) { ... }
+}
+
+@Component
+class Profile extends Thing { ... }
+// -> hier werden die @Autowired Objektvariablen und Methoden an Profile vererbt.
+
+Wichtig zu beachten:
+- Wenn die @Autowired Methode aus der Oberklasse in der Unterklasse überschrieben wird, dann wird das Autowired nicht
+mehr funktionieren. Daher ist es beim Überschreiben der @Autowired Methode wichtig, dass @Autowired in der Unterklasse
+ebenfalls gesetzt wird.
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Autokonfiguration
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Autokonfiguration b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Autokonfiguration
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Autokonfiguration	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,323 @@
+Autokonfiguration
+
+@Conditional und Condition
+Das Spring Framework kann in Abhängigkeit von Bedingungen managed Beans erzeugen.
+
+Eine Implementierung von
+org.springframework.context.annotation.Condition realisiert die Bedingung:
+
+public class MyCondition implements Condition {  // mit der Schnittstelle "Condition" lässt sich diese Bedingung
+    // mit deren Methode "matches" realisieren.
+
+    @Override public boolean matches( ConditionContext context, AnnotatedTypeMetadata metadata ) {
+        return ...
+    }
+}
+
+1. Wir erzeugen also erstmal eine Klasse mit der Schnittstelle "Condition".
+2. Überschreiben dort die Methode "matches", die einen Wahrheitswert zurückgibt. Dort definieren wir die Bedingungen.
+3. Mit der Annotation org.springframework.context.annotation.Conditional geben wir dann einen Typ-Token für die
+Bedingung an. Gilt die Bedingung, dann wird eine Spring-managed Bean erzeugt:
+@Bean @Conditional( MyCondition.class )  // bei Fabrikmethoden
+oder
+@Component @Conditional( MyCondition.class )  // bei Komponenten
+
+-> Annotation @Conditional erfolgt direkt nach der Annotation für die Bean (@Bean / @Component).
+
+- Es können alle möglichen Bedingungen festgelegt werden.
+Z.B.:
+- ob Windows oder Linux genutzt wird
+- ob eine Internetverbindung besteht
+- ob Chrome oder Firefox genutzt wird
+- ob wir einen Vibrationssensor haben
+- usw.
+
+Siehe Beispiel LowDiskSpaceCondition.java.
+
+Die Rückgabe dieser Variable ist dann interessant, wenn wir z.B. auf andere Beans im Container zurückgreifen wollen oder
+auf Properties, die in Application Properties stehen oder auf der Kommandozeile übergeben wurden.
+
+Die Klasse LowDiskSpaceCondition können wir nun mit der Annotation @Conditional benennen:
+
+@Component
+@Conditional( LowDiskSpaceCondition.class )  // Ich gebe den entsprechenden Typ-Token an.
+class TempCleaner {
+
+    private final Logger log = LoggerFactory.getLogger( getClass() );  // Logger wird hinzugefügt
+
+    TempCleaner() {
+        log.info( "Cleaning temp directory to acquire more free disk space" );  // Ohne Implementierung der Funktion,
+        // Da dies nur die Funktion @Conditional erklären soll.
+    }
+}
+
+
+@Conditional(LowDiskSpaceCondition.class ) enthält zwei Informationen:
+@Conditional + LowDiskSpaceCondition.
+Jetzt kann ich diese Annotation sogar zu einer neuen Composed Annotation programmieren/zusammenfassen, die beides das
+enthält:
+
+import org.springframework.context.annotation.Conditional;
+import java.lang.annotation.*;
+
+@Retention( RetentionPolicy.RUNTIME )
+@Target( { ElementTYPE, ElementType.METHOD } )
+@Documented
+@Conditional( LowDiskSpaceCondition.class )
+public @interface ConditionalOnLowDiskSpace {
+}
+
+Damit kann ich dies zusammengefasst so annotieren:
+
+@ConditionOnLowDiskSpace
+class TempCleaner { ... }
+
+
+In der Praxis ist es nun so, dass einige Fragen immer wieder auftauchen, wie z.B.:
+- existiert eine Property?
+- existiert eine Bean?
+- welche Java Version?
+usw.
+
+-> Deshalb hat sich Spring Boot entschieden einige Standards einzufügen, sodass man die häufigen Fälle nicht selbst
+als Conditional-Implementierung realisieren muss.
+-> Das Paket org.springframework.boot.autoconfigure.condition hat einige vordefinierte @ConditionalOn Composed
+Annotationen ergänzt:
+- ConditionalOnProperty: Ist eine gewisse Property gesetzt und hat sie den Wert x?
+- ConditionalOnBean: Existiert bereits eine Bean von dem Typ? Dann soll eine weitere davon kreiert werden.
+- ConditionalOnMissingBean: Fehlt eine gewisse Bean, dann wird der matcher aktiviert und diese Bean wird instanziiert.
+- ConditionalOnClass: Wenn eine gewisse Klasse im Klassenpfad ist, dann wird eine Bean erzeugt.
+- ConditionalOnMissingClass: Das Gegenteil davon.
+- ConditionalOnSingleCandidate: Wenn es einen einzigen Kandidaten gibt, der matched, wird eine Bean erzeugt.
+- ConditionalOnExpression: Wenn eine gewisse Expression aus der Spring Expression Language vorhanden ist, wird eine Bean
+erzeugt.
+- ConditionalOnJava: Dient dazu verschiedene Java-Versionen abzufragen.
+- ConditionalOnJndi
+- ConditionalOnWebApplication, ConditionalOnNotWebApplication: Befinden wir uns in einer bestimmten Web-Anwendung?
+- ConditionalOnResource: Ist eine gewisse Resource vorhanden?
+- ConditionalOnCloudPlattform: Ich kann verschiedene Cloud Plattformen abfragen, ob sie vorhanden sind.
+- ConditionalOnWarDeployment: Prüft ob wir ein traditionelles war Deployment z.B. für einen Servlet-Container haben.
+Wenn wir einen embedded Server nutzen, wird diese Condition "false" ergeben.
+
+Es gibt noch weitere Autokonfigurationen, die von anderen Spring Paketen kommen.
+Z.B. ConditionalOnAvailableEndPoint oder ob eine Default Security vorhanden ist, ob ein Health Indicator vorhanden ist,
+ob Metriken exportiert sind, usw.
+
+Informationen zu den Conditional Annotationen und allen weiteren Spring Boot Bibliotheken finden wir unter:
+https://docs.spring.io/spring-boot/docs/current/api/index.html
+
+
+Beispiel mit @ConditionalOnProperty:
+@Bean
+@ConditionalOnProperty( name="user.name", havingValue="Christian" )  // In der Dokumentation finden wir verschiedene
+// Parameter, wie name, prefix, havingValue, usw.
+// Wir können Parameter übernehmen, welche wir für die Bedingungen benötigen und diese auf die create Methode anwenden:
+public Bean create() { ... }  // Falls der Username Christian in der Property vorhanden ist, wird die create Methode
+ausgelöst.
+
+Das lässt sich auch auf @Component anwenden:
+@Component
+@ConditionalOnProperty( name="user.name", havingValue="Christian" )
+public class ChrisIsThere { ... }
+
+
+Beispiel mit @ConditionalOnMissingBean:
+Wir schauen uns ein Beispiel aus der Klasse JLineShellAutoConfiguration an:
+Diese Klasse ist mit @AutoConfiguration annotiert. Das ist eine besondere Configuration und das ist nur angebracht,
+wenn diese Klassen nur Fabrikmethoden haben.
+
+@Bean
+@ConditionalOnMissingBean({PromptProvider.class})  // Bedingung: Wenn eine Bean dieser PromptProvider-Klasse noch nicht
+// existiert, dann wird diese Methode ausgeführt.
+public PromptProvider promptProvider() {
+    return () -> {
+        return new AttributedString("shell:>", AttributedStyle.DEFAULT.foreground(3));
+    };
+}
+
+
+Autokonfiguration - Die Magie bei Spring Boot
+- Spring Boot erzeugt viele Beans automatisch. Das verleiht dem Framework eine gewisse Magie.
+- Grund dafür sind eine Menge von an @Conditional geknüpfte Spring-managed Beans. Wenn diese speziellen Bedingungen
+zutreffen, löst das bestimmte Aktionen aus. Diesen Prozess nennen wir Autokonfiguration.
+- Wenn z.B. Tomcat im Klassenpfad ist, wird automatisch ein Webserver gestartet.
+- Das ist einer der fundamentalen Unterschiede zwischen Spring Boot und dem Spring Framework:
+    - Das Spring Framework kennt sowas nicht. Es schaut nicht überall nach und macht daraufhin etwas.
+    - Bei Spring Boot hingegen gibt es massenweise solcher Vorgehensweisen: Ich schaue mal nach und mache dann dies oder
+    das. (Condition...)
+
+- Unter https://docs.spring.io/spring-boot/docs/current/api/ finden wir massenweise Einträge zu Autokonfigurationen.
+
+
+Beispiel MongoAutoConfiguration
+org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
+
+@AutoConfiguration  // *1
+@ConditionalOnClass( MongoClient.class )  // *2
+@EnableConfigurationProperties( MongoProperties.class )
+@ConditionalOnMissingBean( "org.springframework.data.mongodb.MongoDatabaseFactory" )
+public class MongoAutoConfiguration  // *3
+    @Bean
+    @ConditionalOnMissingBean( MongoClient.class )  // *4
+    public MongoClient mongo(...) { ... }
+}
+
+*1 @AutoConfiguration annotiert alle Autokonfigurationsklassen.
+*2 Diese Autokonfiguration soll nur laufen, wenn MongoClient im Klassenpfad ist.
+*3 Die Klassen sind public, damit man sie bei der Autokonfiguration ausschließen kann, aber auf die Inhalte sollte man
+nie zugreifen.
+*4 Bean soll nicht aufgebaut werden, wenn MongoClient schon als Spring-managed Bean existiert.
+
+-> Auf der einen Seite gibt es hier also die ConditionalOn-Annotationen an den Datentyp, an einer Komponente und
+auf der anderen Seite die Annotationen an einer Fabrikmethode.
+
+
+- Die Autokonfigurationen sind reguläre Komponenten, werden jedoch nicht durch das ClasspathScanning erkannt.
+- Würden wir solche @AutoConfiguration benutzen, würden die sehr wohl vom ClasspathScanning erkannt werden, denn
+Spring Boot nutzt für die Autokonfigurationen eine etwas andere Technik.
+-> Der Spring Boot Starter referenziert nämlich auf die spring-boot-autoconfigure Dependency und dort gibt es ein
+besonderes META-INF Verzeichnis. Dieses hat ein Unterverzeichnis "spring" und dort gibt es die Datei:
+org.springframework.boot.autoconfigure.AutoConfiguration.imports.
+- Der Dateiname ist recht lang, da er sich aus dem vollqualifizierten Typnamen der Annotation:
+org.springframework.boot.autoconfigure.AutoConfiguration und die Dateiendung ist .imports.
+- Diese Datei enthält viele Zeilen mit Autokonfigurationen (z.B. ist auch die MongoAutoConfiguration dort enthalten).
+-> Diese Autokonfigurationen werden nicht über das ClasspathScanning gefunden, sondern weil diese Datei von Spring Boot
+geöffnet wird und nach der Reihe abgearbeitet wird und alle Autokonfigurationen werden angemeldet.
+
+-> So würde man auch vorgehen, wenn man eigene Starter mit eigenen Autokonfigurationen schreiben würde.
+- Denn die Idee eines Starters ist es ja, dass gewisse Dinge vorkonfiguriert werden und uns auch nicht im Weg stehen,
+wenn wir diese Komponenten bauen würden.
+- Vor Spring Boot 2.7 wurde mit der Datei spring.factories im META-INF Ordner gearbeitet und diese wird aus
+Kompatibilitätsgründen weiterhin ausgewertet. Der moderne Weg ist jedoch über diese AutoConfiguration.imports Datei.
+
+
+Autokonfigurationen werden annotiert mit @AutoConfiguration
+- Im Grunde ist das erstmal eine reguläre @Configuration, mit der Einschränkung, dass die "proxyBeanMethods = false" ist.
+@Configuration( proxyBeanMethods = false )
+-> Das bedeutet, das Spring keinen Untertyp bauen wird.
+- Wenn man sich den Annotationstyp genauer anschaut, kann man im Wesentlichen ablesen, dass es hier darum geht mit
+den Methoden before(), beforeName(), after() oder afterName() auszudrücken ob diese Autokonfiguration vor oder nach
+anderen Autokonfigurationen ausgeführt und initialisiert werden soll.
+
+
+Und / Oder Verknüpfungen von Autokonfigurationen
+- Sind mehrere @Conditional gesetzt, so müssen alle Bedingungen erfüllt sein, damit die Spring-managed Bean aufgebaut
+wird. (Siehe oben MongoConfiguration -> @ConditionalOnClass & @ConditionalOnMissingBean)
+
+- Es ist jedoch auch möglich Konditionen in Autokonfigurationen in einer Oder-Verknüpfung zu verbinden:
+    -Das ist möglich mit der abstrakten Klasse "AnyNestedCondition", von der man seine Klasse erweitern kann.
+    - Dafür muss auch eine weitere Annotation drangesetzt werden:
+    Beispiel:
+    @Configuration
+    @Conditional( AdminAutoConfiguration.AdministratorOrChrisPropertyAvailableCondition.class )
+    public class AdminAutoConfiguration {
+        AdminAutoConfiguration() { /* user.name = "christian" | "Administrator" */}
+
+        static final class AdministratorOrChrisPropertyAvailableCondition extends AnyNestedCondition {
+            AdministratorOrChrisPropertyAvailableCondition() {
+                super (ConfigurationPhase.PARSE_CONFIGURATION );
+            }
+            // Hier kommen dann die Oder Konditionen rein:
+            @ConditionalOnProperty(name = "user.name", havingValue = "Administrator")
+            static class UserNameIsAdministrator {
+            }
+            // Oder:
+            @ConditionalOnProperty(name = "user.name", havingValue = "christian")
+            static class UserNameIsChristian {
+            }
+        }
+    }
+-> Wenn der Username Administrator oder Christian ist, dann wird diese AdminAutoConfiguration aktiviert.
+
+
+Ein Problem in der Praxis ist, dass einem nicht unbedingt klar ist, welche Autokonfigurationen überhaupt aktiviert
+werden und welche nicht.
+-> Daher gibt es eine besondere Möglichkeit alle Autokonfigurationen anzuzeigen, indem man die Property "debug" setzt:
+Verschiedene Möglichkeiten:
+    - Auf der Kommandozeile: --debug oder -Ddebug
+    - Im Code: SpringApplication.run(*.class, "--debug");(Hack)
+    - In application.[properties|yaml]:debug=true/debug: true
+- Wenn man noch mehr Informationen haben möchte, setzt man statt debug die Property trace.
+
+- In unserem Fall testen wir das mal mit der application.properties Datei und tragen dort ein:
+debug=true
+-> Wenn wir das Programm nun starten, sehen wir in der Konsole eine Ausgabe, die mit "Conditions Evaluation Report"
+startet.
+-> Dann erhalten wir Positive matches: Es wird aufgezählt welche Conditions "true" waren, welche Beans erzeugt wurden.
+-> Dann erhalten wir Negative matches: Welche Conditions nicht ge-matched haben.
+-> Dann erhalten wir noch Exclusions.
+-> Und zuletzt noch Unconditional classes.
+Diese beiden können wir erstmal ignorieren.
+
+
+@SpringBootApplication hat @EnableAutoConfiguration
+- Der Grund warum die Autokonfigurationen überhaupt berücksichtigt werden, liegt an der Annotation @EnableAutoConfiguration
+in der @SpringBootApplication.
+- @EnableAutoConfiguration konfiguriert Spring automatisch anhand der Typen im Klassenpfad oder weiteren Bedingungen.
+- Umgekehrt: Wenn wir nicht wollen würden, dass SpringBoot Autokonfigurationen nutzt, dann würden wir die Annotation
+@SpringBootApplication nicht nutzen, sondern nur:
+@SpringBootConfiguration und @ComponentScan.
+
+
+Autokonfigurationen ausschließen
+- Die Autokonfiguration führt zu leicht erhöhter Startzeit
+- und zu Spring managed Beans, die nicht unbedingt nötig sind und vielleicht Konflikte verursachen.
+
+- Autokonfigurationen lassen sich daher exkludieren:
+    Intern:
+    Ich kann dieser Annotation ein Array an Klassen übergeben, die exkludiert werden sollen:
+    @EnableAutoConfiguration( exclude = { DataSourceAutoConfiguration.class,
+    DataSourceTransactionManagerAutoConfiguration.class, HibernateJpaConfiguration.class } )
+    -> Hierbei würden wir gewisse Klassen rund um Datenbanken abschalten.
+
+    - Eine zweite Möglichkeit Autokonfigurationen auszuschließen kann extern über application.properties erfolgen:
+        Entweder:
+        spring.autoconfigure.exclude=
+        org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,
+        DataSourceTransactionManagerAutoConfiguration.class,
+        ...
+
+        Oder (den Index des Arrays angeben und dahinter den Klassennamen):
+        spring.autoconfigure.exclude[0]=
+        [...].autoconfigure.jdbc.DataSourceAutoConfiguration
+        spring.autoconfigure.exclude[1]=
+        [...].autoconfigure.jdbc.DataSource...
+        ...
+        - Welche Schreibweise genutzt wird ist Geschmackssache.
+
+
+Wenn man alle Autokonfigurationen abschaltet (@SpringBootApplication ersetzen durch @SpringBootConfiguration und
+@ComponentScan und den dritten Teil weglassen: @EnableAutoConfiguration), dann kann man auch manuell festlegen welche
+Autokonfigurationen verwendet werden sollen und zwar mit der @Import Annotation:
+
+@Configuration
+@Import( {  // Wir geben ein Array an Klassen an, die genau diese Autokonfigurationen enthalten, die wir brauchen.
+    PropertyPlaceholderAutoConfiguration.class,
+    DispatcherServletAutoConfiguration.class,
+    ...
+    }
+}
+public class WebConfiguration { }
+
+
+Weitere Möglichkeiten die Startzeit von Spring Boot zu reduzieren:
+- Component Index
+- Functional Bean Definitions
+
+-> Jedoch ergeben Messungen, dass es sich bei den Optimierungen um Millisekunden handelt, daher kann dies auch
+vernachlässigt werden.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/ComponentScan
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/ComponentScan b/Date4u/src/main/java/com/udemy/date4u/Tutorial/ComponentScan
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/ComponentScan	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,101 @@
+
+@ComponentScan ist eine Annotation aus dem Spring Framework.
+Diese Annotation wird verwendet, um Spring zu informieren, in welchem Paket es nach Spring-Komponenten suchen soll.
+Spring-Komponenten sind normalerweise mit Annotationen wie @Component, @Service, @Repository oder @Controller
+gekennzeichnet.
+
+@ComponentScan steuert, dass standardmäßig in dem Paket der annotierten Konfigurationsklasse, inklusive aller
+Unterpakete, @Component-annotierte Typen eingesammelt werden.
+- @ComponentScan ist nur an einer @Configuration erlaubt.
+- In welcher Klasse die main(...)-Methode steht ist unbedeutend.
+
+Beispiel:
+
+@Configuration
+@ComponentScan(basePackages = "com.example.myapp")
+public class AppConfig {
+    // Konfigurationsdetails hier
+}
+
+In diesem Beispiel wird @ComponentScan verwendet, um Spring anzuweisen, nach Spring-Komponenten im Paket
+"com.example.myapp" und seinen Unterpaketen zu suchen.
+Alle Klassen, die mit @Component, @Service, @Repository oder @Controller annotiert sind oder von diesen Klassen erben,
+werden von Spring erkannt und als Beans im Kontext der Anwendung registriert.
+
+Diese Funktion ist besonders nützlich in größeren Spring-Anwendungen, da sie die Konfiguration erleichtert und die
+Notwendigkeit verringert, jede Bean einzeln in einer Konfigurationsklasse zu registrieren.
+
+
+basePackages
+Über basePackages lassen sich Wurzelverzeichnisse für das Classpath-Scanning setzen.
+    - Fehlt die Angabe, bildet das Paket von der @ComponentScan annotierten Klasse die Wurzel.
+
+Folgende Schreibweisen sind möglich:
+
+@Configuration
+@ComponentScan( basePackages = { "com.tutego.date4u.core", "com.tutego.date4u.interfaces" } )
+
+@Configuration
+@ComponentScan( { "com.tutego.date4u.core", "com.tutego.date4u.interfaces" } )
+
+@Configuration
+@ComponentScan( "com.tutego.date4u.core", "com.tutego.date4u.interfaces" )
+
+@Configuration
+@ComponentScan( { "com.tutego.date4u.core com.tutego.date4u.interfaces" } )
+
+
+basePackageClasses
+Strings bei basePackages sind schlecht für das Refactoring.
+Mit basePackageClasses lässt sich ein Array von Typen angeben, dessen Pakete die Wurzeln für das Classpath-Scanning
+bilden.
+
+Beispiel:
+
+@Configuration
+@ComponentScan( basePackageClasses = { A.class, B.class } )
+
+Lege extra für basePackageClasses leere Typen in das Paket:
+package com.tutego.date4u.core;
+public interface CoreModule { }
+
+Dann später:
+@ComponentScan( basePackageClasses = { CoreModule.class } )
+
+
+includeFilters und excludeFilters
+Wurden bei @ComponentScan Wurzelpakete ausgewählt, lassen sich im zweiten Schritt über
+    - includeFilters gezielt Typen einschließen und mit
+    - excludeFilters gezielt Typen ausschließen.
+
+Da standardmäßig @ComponentScan alle @Component-Typen einbindet, kann man für includeFilters die automatische Erkennung
+mit einem Annotationsattribut abschalten:
+useDefaultFilters = false
+
+Diese Filter sind geschachtelte Typen im Annotations-Typ @ComponentScan:
+@ComponentScan.Filter
+- Der Filter enthält einen FilterType zum Filtern nach z.B. Basistypen, Regex-Ausdrücken, gesetzte Annotationen.
+- Der Standard ist FilterType.ANNOTATION.
+
+Beispiel:
+Ich möchte nur die Komponenten aufnehmen, die Thumbnail als Basistypen haben:
+
+@Configuration
+@ComponentScan(
+    useDefaultFilters = false,
+    includeFilters = @ComponentScan.Filter(
+    type = FilterType.ASSIGNABLE_TYPE,  // (mit Assignable Type werden alle Klassen aufgenommen, auch wenn sie nicht mit
+    // @Component annotiert wurden.)
+    classes = Thumbnail.class ) )
+class ThumbnailScanner { }
+
+
+Beispiel für excludeFilters:
+
+@Configuration
+@ComponentScan(
+    // useDefaultFilters = false,
+    excludeFilters = @ComponentScan.Filter(
+    type = FilterType.ASSIGNABLE_TYPE,
+    classes = AwtBicubicThumbnail.class ) )
+class ThumbnailScanner { }
\ No newline at end of file
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/DI mehrere Abhängigkeiten
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/DI mehrere Abhängigkeiten b/Date4u/src/main/java/com/udemy/date4u/Tutorial/DI mehrere Abhängigkeiten
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/DI mehrere Abhängigkeiten	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,56 @@
+DI - Mehrere Abhängigkeiten
+
+- Eine managed Bean kann mehrere Komponenten injiziert bekommen.
+- Eine Komponente (Bean) braucht andere Referenzen (Beans), um vollständig arbeiten zu können.
+- Eine Besonderheit gibt es hier bei der Setter Injection:
+    - Eine @Autowired Methode kann einen beliebigen Namen erhalten (muss nicht set heißen)
+    - Sie kann mehrere Komponenten als Parameter (Beans) empfangen
+
+
+- Eine @Autowired Komponente funktioniert nur, wenn wir uns wirklich eine Komponente wünschen. D.h. Die Methode muss
+eine weitere Bean wünschen (benennen), sonst entsteht eine Exception.
+
+
+Optionale Abhängigkeiten
+- Optionale Abh. sind am besten als Setter-Injection zu benutzen
+
+Option 1: Annotationsattribut
+@Autowired(required = false)
+Thumbnail maybeThumbnail;
+
+Options 2: @Nullable
+@Autowired @Nullable Thumbnail maybeThumbnail;
+
+Option 3: Einsatz von Optional
+@Autowired Optional<Thumbnail> maybeThumbnail;
+
+Option 4: ObjektProvider
+@Autowired ObjectProvider<Thumbnail> maybeThumbnail;
+    - optionale Beans und Mehrdeutigkeiten
+
+
+Zyklische Abhängigkeiten
+- sind standardmäßig nicht erlaubt
+Beispiel:
+@Component class A { @Autowired B b; }
+@Component class B { @Autowired A a; }
+A braucht B und B braucht A
+-> Dies führt zu einer Ausnahme
+
+Falls man diese Abhängigkeit wirklich benötigt, lässt sie sich notfalls erlauben:
+- spring.main.allow-circular-references auf true setzen
+- Setter nutzen
+- @Lazy-Annotation bei @Autowired einsetzen
+
+
+Andere Dinge injizieren
+- Neben den eigenen Komponenten lassen sich vordefinierte Komponenten injizieren. Zum Beispiel den Kontext selbst:
+@Autowired
+ApplicationContext applicationContext;
+
+- Andere wären z.B.: BeanFactory, Environment, ResourceLoader, ApplicationEventPublisher und MessageSource bzw. deren
+konkrete Untertypen wie ConfigurableApplicationContext oder ResourcePatternResolver.
+-Allerdings sollte man sich hier keine Spring-managed Beans 'holen', denn das ist das Gegenteil von der Spring-
+Philosophie: "wollen und sich geben lassen".
+-> ich glaube damit ist gemeint, dass man diese Komponenten nicht zusätzlich injizieren muss. Man muss sie sich nur
+'wünschen' mit DI geben lassen als Parameter zum passenden Bean.
\ No newline at end of file
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Hierarchische Kontexte
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Hierarchische Kontexte b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Hierarchische Kontexte
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Hierarchische Kontexte	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,108 @@
+Hierarchische Kontexte
+
+Oft nutzt eine Spring-Boot-Anwendung nur einen ApplicationContext.
+    - Jede Spring-managed Bean ist an jeder Stelle injizierbar.
+
+Es lassen sich auch hierarchische Eltern-Kind-Beziehungen bilden.
+    - Damit lassen sich die Sichtbarkeiten der Spring-managed Beans steuern und isolierte 'Module' bilden.
+    - Bei einer Onion-Architecture ist das nützlich.
+    - Bei einer Webanwendung möchte man vielleicht gemeinsame Applikation-Beans haben, aber sonst soll jede
+    Webanwendung ihre eigenen Beans nutzen.
+    - Im Kern steckt das Wichtigste, die Domäne und die ist völlig technologie-unabhängig.
+    - Außen sind die Schichten, z.B. die Infrastruktur. Die äußeren Schichten dürfen die inneren Komponenten nutzen,
+    aber die inneren Komponenten wissen nichts von der äußeren Infrastruktur.
+    -> Sowas wird durch hierarchische Kontexte unterstützt.
+    - Die inneren Komponenten bilden die Basis, also die Eltern und die äußeren Komponenten sind die Kinder.
+    - Die Kind-Komponenten können somit die inneren -Eltern-Komponenten sehen, aber umgekehrt nicht.
+    - Bei Webanwendungen macht dies auch Sinn, indem verschiedene Webkomponenten voneinander getrennt werden.
+
+
+Wie lässt sich das realisieren?
+
+1. Typen trennen
+- Damit die Typen den Kontexten zugeordnet werden können, wird eine Klasse mit zwei Konfigurationen geschrieben.
+- Es wird in ParentConfig- und ChildConfig-Klassen aufgeteilt, die jeweils eigene @ComponentScan Pfade nutzen, damit
+die Beans separat voneinander gescannt werden:
+
+package abc.hierarchy;  // Hierfür wird ein eigenes Package verwendet.
+
+public class MainApplication {  // in dem Beispiel wurde dafür eine eigene Klasse für die Konfigurationen aufgebaut.
+
+    // Elternkontext
+    @Configuration( proxyBeanMethods = false )  // Es werden keine Proxys für die Bean-Methoden erstellt. Damit wird
+    // Zugriff auf Spring-Bean-Methoden gesteuert.
+    @ComponentScan( "abc.hierarchy.parent" )  // Komponenten werden nur im parent-Package gescannt.
+    public static class ParentConfig { }
+
+    //Kindkontext
+    @Configuration( proxyBeanMethods = false )  // Proxys ebenso deaktiviert.
+    @ComponentScan( "abc.hierarchy.child" )  // Komponenten werden nur im child-Package gescannt.
+    public static class ChildConfig { }
+}
+
+2. Das Verhältnis zu Parent und Child
+Simples Beispiel zur Erklärung:
+
+package abc.hierarchy.parent;
+
+@Component  // Diese Klasse wird über das ClasspathScanning erkannt.
+public class Parent {
+    // kein @Autowired!  Parent-Klasse soll keinen Zugriff auf Child-Komponenten haben!
+    // Keine Referenz auf Child. Parent kennt nicht Child.
+}
+
+package abc.hierarchy.child;
+
+@Component  // Klasse über ClasspathScanning erkannt.
+public class Child {
+    @Autowired Parent parent;  // Child hat Zugriff auf Parent-Komponenten.
+    // Referenz auf Parent vorhanden. Child kennt Parent.
+}
+
+3. Konfiguration über SpringBootConfiguration
+@SpringBootApplication lässt sich nicht mehr verwenden, denn die damit verbundene Autokonfiguration registriert alle
+Beans in den Unterpaketen im Root-Kontext.
+
+package abc.hierarchy;
+
+// Anstatt SpringBootApplication nehmen wir die zwei Teile davon (@SpringBootConfiguration
+// und @EnableAutoConfiguration) und lassen @ClasspathScanning weg, damit nicht alle Komponenten gescannt werden:
+@SpringBootConfiguration
+@EnableAutoConfiguration
+// ClasspathScanning ist in den geschachtelten Unterklassen aktiviert.
+public class MainApplication {
+
+    ...
+    static class *Config { }
+    public static void main( String[] args ) { ... }
+}
+
+4. Anstatt SpringApplication, nutzen wir den SpringApplicationBuilder, mit dem sich hierarchische Kontexte bilden lassen.
+Mit dem SpringApplicationBuilder haben wir 3 Methoden, die im Zusammenhang mit dem hierarchischen Kontext stehen:
+- parent(Class<?>... sources): Setzt den Elternkontext. (Häufig kann man stattdessen die Methode sources anstatt parent
+nutzen.)
+- child(Class<?>... sources): Setzt die Kinder (Defaults werden von Eltern übernommen). Zurück kommt der neue Kontext
+von Kind. -> Bei der Deklaration ist die Reihenfolge wichtig. Kaskadischer Aufbau.
+- sibling(Class<?>... sources): Setzt Geschwister gleichwertig unter den Elternkontext.
+
+5. Beispiel für hierarchischen Kontext
+ChildConfig steht unter ParentConfig:
+
+new SpringApplicationBuilder( /* ParentConfig.class */ ) // Diese Variante geht auch anstatt .parent(...)
+    // .sources( ParentConfig.class )  // oder diese Variante mit .sources anstatt .parent
+    .parent( ParentConfig.class )
+    .child( ChildConfig.class )
+//  .sibling( AnotherChildConfig.class )
+    .run(args);
+
+Zusammenfassung:
+- Die Reihenfolge ist ganz wichtig. Erst .parent, dann .child und dann erst .sibling.
+- Ein hierarchischer Kontext schränkt die Sichtbarkeit von Spring-managed Beans ein.
+- Spring-managed Beans aus einem übergeordneten Kontext (parent) sind in einem untergeordneten Kontext (child)
+zugänglich, aber nicht andersherum.
+- Jeder untergeordnete Kontext hat höchstens einen übergeordneten Kontext. -> Jedes child nur ein parent.
+
+
+
+
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Import
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Import b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Import
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Import	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,33 @@
+@Import Annotation
+
+Mit der @Import Annotation kann ich Klassen in andere @Configuration-Typen importieren.
+
+@Component
+class Water {}
+
+@Configuration
+class CoffeeBeansConfig {
+    @Bean public CoffeeBeans beans() { ... }
+
+@Configuration
+@Import( { Water.class, CoffeeBeansConfig.class } )
+class CoffeeConfig {
+    @Bean public Coffee coffee( CoffeeBeans bean ) { ... }
+}
+
+Das ist normalerweise unnötig, da Classpath-Scanning sowieso alle Klassen scannt und sie hinzufügt, jedoch ist dies
+in den folgenden Fällen sinnvoll:
+- Eine Konfiguration soll eingebunden werden, welche sich in einer anderen Hierarchie, einem anderen Package befindet
+und das Classpath-Scanning darauf nicht zugreifen kann, da diese Konfigurationen außerhalb des konfigurierten Suchphades
+des Classpath-Scannings liegen.
+- Oder wenn Classpath-Scanning ausgeschaltet ist.
+
+-> Damit kann man sogar auf das Classpath-Scanning verzichten. Falls ich nicht alle Typen brauche sondern nur bestimmte
+Typen, dann könnte ich mit Import alle Konfigurationstypen sammeln und dem Framework sagen welche Typen wir explizit
+für diese Anwendung brauchen.
+
+
+ImportSelector
+Ein ImportSelector enthält eine Logik, die zur Laufzeit entscheiden kann welche vollqualifizierten Typen für eine
+@Configuration geliefert werden sollen. Es ist ähnlich wie bei einer Fabrikmethode, wo zur Laufzeit entschieden
+werden kann welche Beans erzeugt werden sollen.
\ No newline at end of file
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/ImportResource XML
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/ImportResource XML b/Date4u/src/main/java/com/udemy/date4u/Tutorial/ImportResource XML
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/ImportResource XML	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,78 @@
+Import von XML-Konfigurationen mit @ImportResource
+
+- Früher musste man die Bean Definitionen und die Verdrahtung in XML vornehmen.
+- Das ist immer noch möglich, auch wenn es heutzutage eine immer geringere Rolle spielt.
+
+Beispiel Aufgabe:
+Wir wollen eine erweiterbare Software schreiben, wo unsere Kunden eigene Thumbnail Implementierung bereitstellen können.
+Die Deklaration des Thumbnails soll deklarativ erfolgen und die Komponente, die der Kunde schreibt, soll völlig losgelöst
+vom Spring Framework und auch ohne die Annotationen auskommen:
+
+package com.example;
+
+import ...
+
+public class EmptyThumbnail implements Thumbnail {
+    private static final byte[] MINIMAL_JPG = Base64.getDecoder().decode(...)
+    @Override public byte[] thumbnail( byte[] imageBytes ) {
+        return MINIMAL_JPG;
+    }
+}
+
+
+Diese Implementierung soll nun angemeldet werden und als Spring-managed Bean aufgenommen werden:
+Wir legen eine XML-Datei im Klassenpfad an:
+src/main/resources/spring-context.xml (Datei kann beliebigen Namen haben)
+
+In dieser Datei soll nun die Bean aufgeführt sein.
+
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="..........."  // diese Teile sind nicht essentiell, haben jedoch sinnvolle Funktionen.
+       xmlns:xsi="......"   // z.B. Namensräume und Schema-Definitionen...
+       xsi:schemaLocation="......"
+
+   // Wichtig:
+   <bean id="emptyThumbnail"  // Name der Komponente
+         class="com.example.EmptyThumbnail"  // Welcher Typ steckt dahinter
+         primary="true">  // Ausdruck, dass Bean Priorität hat (@Primary)
+   </bean>
+</beans>
+
+Im nächsten Schritt können wir die erstellte XML-Konfiguration in unser Spring Boot Projekt importieren:
+Beispiel @SpringBootApplication:
+
+@SpringBootApplication
+@ImportResource( "classpath*:spring-context.xml" )  // * bedeutet ein Array von Dateien, das kann auch leer sein.
+// damit bleibt der Import Optional, falls die Datei nicht existieren sollte.
+public class Date4uApplication { ... }
+
+- die @ImportResource lässt sich an jede beliebige Configuration dransetzen.
+- dies waren die Schritte, die nötig sind, um Java Beans in XML beschreiben zu können.
+
+
+Es gibt jedoch noch einfachere, schlankere Alternativen Beans zu beschreiben, als per XML und zwar mit Groovy:
+- Groovy ist eine alternative Programmiersprache auf der JVM, die es seit 2003 gibt.
+- Bean-Konfigurationen können auch als Groovy-Skripte geschrieben werden.
+- Bei Gradle werden automatisch Groovy-Skripte verwendet.
+
+1. Einbinden der Groovy-Laufzeitumgebung, damit der Groovy Compiler uns die Laufzeitbibliotheken zur Verfügung stellt:
+<dependency>
+    <groupId>org.codehaus.groovy</groupId>
+    <artifactId>groovy</artifactId>
+</dependency>
+
+2. Beans im Groovy-Skript deklarieren:
+beans {
+    emptyThumbnail(com.example.EmptyThumbnail) {
+    bean -> bean.primary = true  // wie wir sehen ist dies eine deutlich einfachere Schreibweise als in XML
+    }
+}
+
+3. Groovy-Skript einbinden:
+@ImportResource( "classpath*:spring-context.groovy" )
+
+
+- heute spielen Konfigurationen über XML praktisch keine Rolle mehr, jedoch werden sie weiterhin von Spring unterstützt.
+- Nachteil bei nativer Compilation, XML muss geparst werden.
+- Falls sich Klassen ändern, dann funktioniert das Ganze nicht mehr, also heutzutage nicht so praktisch.
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Injizieren erfragen außerhalb Spring
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Injizieren erfragen außerhalb Spring b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Injizieren erfragen außerhalb Spring
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Injizieren erfragen außerhalb Spring	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,82 @@
+Injizierung in Spring unmanaged Beans
+Damit das Injizieren der Abhängigkeiten funktioniert, muss Spring die Komponenten selbst aufgebaut haben.
+Es gibt aber auch Stellen außerhalb von Spring, die ebenfalls Objekte aufbauen:
+- Programme erzeugen mit new Objekte, etwa bei Ereignissen, die dann versendet werden.
+- Objekte werden durch die Deserialisierung rekonstruiert. Das gilt oft für Behälter.
+- Frameworks erstellen Objekte für uns: JavaFX erzeugt Controller-Instanzen, ein Jakarta Persistence Provider lädt und
+instanziiert Entity-Beans und Entity-Listener, etc.
+-> Spring kann auch für diese 'unmanaged'-Objekte eine Verdrahtung vornehmen.
+    - Die Verdrahtung kann von außen oder von innen erfolgen.
+
+
+1. Methode: AutowireCapableBeanFactory
+Eine DefaultListableBeanFactory implementiert die Schnittstelle AutowireCapableBeanFactory.
+Die autowire*(...)-Methoden führen auf einer nicht-Spring-managed Bean Verdrahtungen durch.
+-> D.h. es ist möglich nicht-Beans nachträglich mit autowire-Methoden mit anderen Beans zu verdrahten, andere Beans
+dort zu injizieren.
+
+Beispiel mit einem @Service, der Währungen formatieren kann:
+
+@Service
+class CurrencyFormatter {
+    public String format( double d ) {
+        return d + " €";
+    }
+}
+
+// Dies ist eine externe Klasse, die nicht zu Spring gehört und somit keine Bean Component ist:
+class MonetaryAmount {
+    private final double amount;
+
+    @Autowired CurrencyFormatter currencyFormatter;  // wieso funktioniert das? Das sehen wir gleich im nächsten Schritt.
+
+    public MonetaryAmount( double amount ) {
+        this.amount = amount;
+    }
+    @Override public String toString() {
+        return currencyFormatter.format( amount );
+    }
+}
+
+// Hier erstellen wir jetzt eine Klasse, die das Autowire bei MonetaryAmount ermöglichen soll:
+@Component
+class MonetaryAmountFactory {
+    @Autowired DefaultListableBeanFactory beanFactory;  // wir verdrahten die Schnittstelle, die entscheidend ist, um
+    die autowire-Methode anzuwenden.
+
+    // Diese Methode erstellt ein Objekt mit dem Parameter double amount:
+    MonetaryAmount createAmount( double amount ) {
+        MonetaryAmount monetaryAmount = new MonetaryAmount ( amount );
+
+        beanFactory.autowireBean( monetaryAmount );  // -> hier wird die autowireBean Methode angewendet, damit die
+        Komponente "monetaryAmount" automatisch autowired wird.
+
+        return monetaryAmount;
+    }
+}
+Damit ist MonetaryAmount zwar keine Spring-managed Bean, aber mit dieser Komponente wird monetaryAmount autowired.
+Auf diese Weise werden alle autowires vorgenommen, daher bekommt MonetaryAmount auch den CurrencyFormatter.
+
+Und so kann das Ganze nun eingesetzt werden:
+@SpringBootApplication
+public class AutowireBeanDemo {
+    public static void main( String[] args ) {
+        var ctx = SpringApplication.run( AutowireBeanDemo.class, args );  // Der Container wird gestartet
+        var amountFactory = ctx.Bean( MonetaryAmountFactory.class );  // mit getBean holen wir die Bean raus
+        System.out.println( amountFactory.createAmount( 12.3 ) );  // diese Bean hat die Methode createAmount.
+        // Wenn diese Methode nun durchgeführt wird, dann wird intern das autowireBean durchgeführt.
+        // Somit funktioniert dann auch die toString Methode mit dem CurrencyFormatter.
+    }
+}
+
+
+2. Es gibt weitere Methoden, wie in nicht Spring managed Beans injiziert werden kann. Die schreibe ich jetzt nicht auf.
+Das wird alles sehr komplex und ich weiß noch nicht ob ich das wirklich gebrauchen kann. (ab Kapitel 26, 6:48min)
+
+
+Spring-managed Beans woanders anmelden, in anderen Frameworks.
+- getBean(...)-Methoden und getBeansWithAnnotation(...). (Kapitel 26. 15:55 min)
+...
+
+
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/IoC DI
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/IoC DI b/Date4u/src/main/java/com/udemy/date4u/Tutorial/IoC DI
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/IoC DI	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,80 @@
+Inversion of Control (IoC) / Dependency Injection (DI)
+IoC:
+- Objekte kennen sich nicht mehr selbst und haben keine Kontrolle über ihre Verkettung, sondern überlassen die
+Verantwortung einer anderen Instanz.
+- Das ist der IoC-Container.
+DI:
+- Dependency Injection ist eine besondere Form von IoC.
+- Der Begriff geht auf einen Artikel von Martin Fowler im Jahr 2004 zurück.
+- Es handelt sich dabei um eine Technik, bei der die Abhängigkeiten eines Objekts (wie andere Klassen oder Dienste)
+nicht in der Klasse selbst erstellt, sondern von außen in die Klasse injiziert werden.
+- Dies ermöglicht eine lose Kopplung zwischen verschiedenen Komponenten in einer Anwendung und erleichtert die
+Wartbarkeit und Testbarkeit des Codes.
+
+
+Es gibt drei Varianten von Dependency Injection:
+
+//- Constructor Injection:
+public class FsCommands {
+
+    //Da wir DI anwenden, klammern wir das nun aus:
+    // private final FileSystem fs = new FileSystem();
+
+    //Und nun wird FileSystem mit Constructor Injection erzeugt:
+
+    //Wir erzeugen erst eine Variable:
+    private final FileSystem fs;
+
+    //Mit Autowired wird dieses Bean automatisch mit den anderen Beans vernetzt.
+
+    //Nun wird FileSystem in Konstruktor übergeben, sodass FileSystem erst erzeugt werden muss, damit der
+    //Konstruktor ausgeführt werden kann. Damit die Vernetzung funktioniert muss die Klasse FsCommands eine @Component
+    //sein und FileSystem muss eine @Component sein.
+    //1. FileSystem erzeugen, 2. An Konstruktor übergeben und ausführen:
+
+    @Autowired
+    public FsCommands(FileSystem fs) {
+        this.fs = fs;
+    }
+
+
+//- Setter-Injection:
+    private FileSystem fs;  // Unterschied zu Constructor Injection: Variable kann nicht final sein.
+
+    @Autowired
+    public void setFileSystem(FileSystem fs) {  // Im Prinzip wie beim Konstruktor.
+        this.fs = fs;
+    }
+
+
+//- Field-Injection:
+    @Autowired private FileSystem fs;  // Kann auch nicht final sein.
+
+//Hier wird @Autowired direkt neben die Variable geschrieben, da wir uns etwas von der Objekt-Variable wünschen.
+
+
+
+Was passiert während des Field-Injection im Hintergrund?
+1. Container fährt hoch
+2. Container erkennt Shell-Komponente und initialisiert sie
+3. Container erkennt die Annotation @Autowired, hier will jemand etwas haben
+4. Folglich nimmt er aus dem Kontext das Dateisystem FileSystem, welches logischerweise vorher aufgebaut sein muss,
+und schreibt es per Reflection in diese private Variable rein.
+
+Constructor- und Setter-Injection sind die bessere Variante. Sie eignen sich auch besser für Tests.
+Constructor-Injection macht auch deutlich welche Referenzen hier benötigt werden. Bei den anderen sind die Referenzen
+eher versteckt. (API Dokumentationen)
+Zusätzlicher Vorteil des Constructor-Injection ist die finale Variable. Es können nachträglich keine Änderungen daran
+vorgenommen werden.
+
+Field Injections sind eine eher unsaubere Lösung, da hier über Reflections etwas getrickst werden muss.
+Weitere Nachteile:
+- Objektvariablen können nicht final sein
+- Abhängigkeiten werden etwas versteckt (API Dokumentation zeigt die Abhängigkeiten fälschlicherweise nicht an)
+    -> Bei Tests kann es dann zu Exceptions kommen (NullPointerException), da Abhängigkeiten fehlen.
+- Bei Constructor und Setter kann Programmcode direkt starten, wenn der Container den Constructor/Setter aufruft.
+Das ist bei Field-Injection nicht möglich. Die Variablen sind plötzlich da und initialisiert und Objekte lassen sich
+nicht mehr umwandeln, anpassen.
+- Im Testfall lassen sich private Objektvariablen nur über Reflection beschreiben.
+
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Konfigurationsklassen & Fabrikmethoden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Konfigurationsklassen & Fabrikmethoden b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Konfigurationsklassen & Fabrikmethoden
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Konfigurationsklassen & Fabrikmethoden	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,131 @@
+Konfigurationsklassen und Fabrikmethoden
+
+Wenn Klassen mit @Component bzw. den Composed Annotations annotiert sind, werden sie durch das Classpath-Scanning
+erkannt und es wird unweigerlich über den Konstruktor eine Instanz (Spring managed-Bean) erzeugt.
+- Der Nachteil ist, dass man nicht je nach Situation steuern kann welche Instanzen gebaut werden sollen.
+
+- Wir brauchen jedoch manchmal Fabrikmethoden, die die Erzeugung der Beans an bestimmte Bedingungen knüpfen.
+    -> Ich bekomme die Bean A, anderenfalls die Bean B
+- Wenn wir nur @Component Klassen instanziieren könnten, dann könnten wir nur diese Klassen, die unter unserer Kontrolle
+sind nutzen, verknüpfen etc. Was wäre mit Klassen, die überhaupt kein @Component besitzen? Die brauchen wir vll auch.
+
+-> Deshalb gibt es die Fabrikmethoden, die ebenfalls Beans liefern können.
+- Wir haben dort die Freiheit was wir dort für Instanzen bauen und unter welchen Abhängigkeiten.
+- Außerdem können wir beliebige Instanzen von beliebigen Typen bauen und diese dann problemlos als Spring managed Bean
+in den Kontext setzen.
+
+
+Fabrikmethoden @Configuration und @Bean
+Sind Methoden mit @Bean annotiert, lassen sich eigene Exemplare von Hand ganz individuell im eigenen Code aufbauen.
+Im Ergebnis sind sie gleichwertig zu den @Component-Beans; sie lassen sich injizieren und aus dem Kontext holen.
+
+@Configuration
+public class MyOwnBeanFactory {
+
+    @Bean
+    Foo bean_name_is_method_name() { return... }
+    @Bean
+    Bar another_factory_method() { return... }
+
+1. Klassen mit Fabrikmethoden sind im Allgemeinen mit @Configuration annotiert.
+2. Spring betrachtet alle mit @Bean annotierten Methoden als Fabrikmethoden für Spring-managed Beans.
+3. Die Sichtbarkeit muss nicht public sein, Paketsichtbarkeit ist in Ordnung.
+4. Der Rückgabetyp sollte immer so präzise wie möglich sein.
+5. Der Methodenname bestimmt den Namen der Bean. (Achtung, es darf nicht zwei Beans mit dem gleichen Namen haben)
+
+-> Der Container ruft das Classpath-Scanning auf, findet die @Bean Methoden und ruft diese Methoden automatisch auf.
+Im inneren der Methoden wird eine Instanz aufgebaut und zurückgegeben. -> Die zurückgegebene Instanz kommt dann als
+Spring-managed Bean in den Kontext.
+
+- Beim @Autowired werden die von der Fabrikmethode erzeugten @Beans gleichwertig zu den Beans behandelt, die mit
+@Component annotiert wurden.
+
+- Statische geschachtelte Klassen können ebenfalls eine @Configuration sein.
+- Auch @Component-Klassen können @Bean-Methoden haben; es entsteht jedoch eine leistungsschwächere 'lite bean'.
+- SpringBootApplication ist ebenfalls eine Configuration: @SpringBootConfiguration und eine @Configuration ist ebenfalls
+eine @Component und somit ist dies auch ein Bean.
+-> D.h. dass man in die SpringBootApplication-Klasse ebenfalls @Bean Methoden setzen kann.
+
+
+Beispiel mit eigenem PromptProvider:
+
+@Configuration
+public class PromptProviderConfig {
+    // PromptProvider für normale Benutzer:
+    private static final PromptProvider userPromptProvider = () ->
+        new AttributedString( "date4u:>" );
+
+    // PromptProvider für Admins:
+    private static final PromptProvider adminPromptProvider = () ->
+        new AttributedString( "date4u[admin]:>",
+            AttributedStyle.DEFAULT.foreground( AttributedStyle.RED ) );  // mit roter Schriftfarbe
+
+    @Bean
+    PromptProvider myPromptProvider() {
+    if ( is admin )
+        return adminPromptProvider;
+    else
+        return userPromptProvider;
+    }
+    /* Abhängig davon welche Bedingung zutrifft, wird der entsprechende PromptProvider während der Laufzeit
+    instanziiert.
+    */
+}
+
+
+Diverse Bean-Typen sind erlaubt
+- Intuitiv denkt man, dass nur komplexe Objekte wie Services als Spring-managed Beans verwaltet werden können.
+- Doch es lassen sich alle möglichen Objekte in den Kontext setzen, auch einfache Objekte wie z.B. Strings:
+
+@Bean String name() {
+    return "fillmore";
+}
+
+// oder Arrays:
+@Bean String[] names() {
+    return new String[] { "fillmore", "juicylucy" };
+}
+
+// oder Lists:
+@Bean List<String> namesList() {
+    return List.of( "fillmore", "juicylucy" );
+}
+
+
+- Fabrikmethoden können sich ebenfalls Referenzen auf andere Beans wünschen.
+- Bean Methoden sind Singletons, denn sie werden nur ein einziges Mal beim Aufbau instanziiert.
+
+
+InjectionPoint
+- Bei der Erzeugung von Spring-managed Beans über Fabrikmethoden könnte der angeforderte Injektionspunkt (d.h. der Ort,
+an dem eine Abhängigkeit in einen Spring-Bean injiziert wird) ein wichtiges Kriterium für die Konfiguration der Bean
+sein.
+- Eine Fabrikmethode kann einen Parameter vom Typ InjectionPoint deklarieren und so auf den Injektionspunkt zugreifen.
+- Es könnte z.B. sein, dass diese Bean aus der Klasse A eingefordert wird und auch aus der Klasse B. Somit kann es sein,
+dass sie dafür jeweils etwas anders konfiguriert werden muss.
+- InjectionPoint wird normalerweise in fortgeschritteneren Spring-Anwendungen und in Fällen verwendet, in denen Sie
+Metadaten oder spezielle Logik für die Abhängigkeitsinjektion benötigen. In den meisten Spring-Anwendungen werden Sie
+wahrscheinlich @Autowired oder andere Injektions-Annotationen verwenden, ohne sich direkt auf InjectionPoint beziehen
+zu müssen.
+- Da eine Bean eine Singleton ist, wir jedoch vielleicht unterschiedliche Konfigurationen der Bean benötigen, je nachdem
+welche Bedingung zutrifft, so kann neben @Bean die Annotation @Scope gesetzt werden:
+@Bean @Scope( ConfigurableBeanFactory.SCOPE_PROTOTYPE )
+Dabei werden Prototyp Beans erstellt, die immer neu erzeugt werden.
+
+
+Statische @Bean-Methode
+- Vorteil von statischen @Bean-Methoden ist, dass keine Instanz der Configuration Klasse existieren muss.
+- Sie werden zeitlich sogar vor der umgebenden @Configuration-Bean aufgebaut.
+- Statische Methoden sind nicht dynamisch gebunden, daher funktioniert der Methodenaufruf untereinander nicht so, wie
+bei einer Objektmethode in einer @Configuration.
+- Statische Bean-Methoden sind nur selten nötig.
+
+
+Zusammenfassend:
+Es gibt verschiedene Möglichkeiten, wie Spring-managed Beans aufgebaut werden können:
+1. Mit Komponenten: @Component (@Controller, @Service, @Repository...)
+2. Mit Fabrikmethoden: @Bean-Methoden
+
+-> Letztendlich landen diese Komponenten in einem Sack mit allen managed Beans
+-> Dann können diese managed Beans per @Autowired initiiert werden.
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Lebenszyklus der Beans
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Lebenszyklus der Beans b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Lebenszyklus der Beans
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Lebenszyklus der Beans	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,183 @@
+Lebenszyklus der Beans
+- Eine Spring-managed Bean wird automatisch aufgebaut wenn:
+    - der Typ mit @Component annotiert wird
+    - es eine @Bean-Methode gibt
+
+- Durch Constructor-Injection ergibt sich eine explizite Abhängigkeit, dass eine Komponente vor einer anderen Komponente
+aufgebaut werden muss.
+    - Dadurch ändert sich die Reihenfolge der aufgebauten Spring managed Beans.
+
+
+@DependsOn
+- Mit @DependsOn lassen sich eine oder mehrere Beans vor der eigenen Bean initialisieren:
+@DependsOn( { "aBean", "anotherBean" } )
+- Wenn ich @Autowired verwende, brauche ich natürlich kein @DependsOn. Falls jedoch eine Abhängigkeit erzeugt werden
+soll, bei der kein Autowired verwendet werden soll, dann bietet sich DependsOn an.
+
+- Nehmen wir an, das FileSystem muss vor dem FileWatcher initialisiert werden:
+    - @DependsOn als Typ-Annotation:
+        @Component @DependsOn( "fileSystem" )
+        class FileWatcher
+
+    - @DependsOn als Methoden-Annotation:
+        @Bean @DependsOn( "fileSystem" )
+        FileWatcher fileWatcher() { ... }
+
+Probleme mit @DependsOn
+- Namen der Spring managed Beans sind als String im Code (Tippfehler möglich -> NoSuchBeanDefinitionException)
+- Während bei Constructor-Injection eine Abhängigkeit deutlich aufgezeigt wird, so ist sie bei @DependsOn lediglich
+deklarativ.
+    -> Bei der Implementierung von Testfällen muss diese versteckte abhängige Komponente ggf. zuerst aufgebaut werden.
+
+
+Verzögerte Initialisierung (lazy initialization)
+- Singletons werden immer erzeugt, auch wenn sie nicht injiziert oder aus dem Kontext erfragt werden.
+    - Es gibt in Spring auch Prototypen, die bei jeder Anfrage neu erzeugt werden, das ist jedoch etwas anderes.
+- Werden alle Komponenten zum Start aufgebaut, ist die Startzeit höher, aber Fehler fallen früh auf.
+- Der Vorteil liegt also darin, dass wenn alle Beans im Container am Anfang aufgebaut sind, dann kann man davon ausgehen,
+dass keine weiteren Fehler auftauchen werden.
+
+- Spring erlaubt eine verzögerte Initialisierung (lazy initialization), die Komponenten erst dann aufbaut, wenn sie
+wirklich benötigt werden.
+- Verzögerte Initialisierung verbessert die Startzeit, aber Fehler fallen erst spät auf.
+    - Beim Test/Development ist die verzögerte Initialisierung ein Vorteil (da wir zum Testen das Programm häufig
+    starten und die Startzeit somit ins Gewicht fällt), beim Release-Produkt eher nicht.
+
+- Mit der Annotation @Lazy lässt sich eine verzögerte Initialisierung lokal für eine Spring managed Bean deklarieren:
+
+@Lazy @Component
+class FileSystem { ... }
+// -> falls die Komponente bei keiner anderen Bean zur Laufzeit benötigt wurde, dann wird es solange auch nicht
+// hochgefahren. Erst wenn das FileSystem z.B. durch @Autowired aufgerufen wird, dann wird diese Komponente aufgebaut.
+
+@Lazy @Bean
+UUID appUuid() { ... }
+// -> Auch hier das gleiche: Wenn sich niemand für diese Bean interessiert, dann wird diese Fabrikmethode auch nicht
+// aufgerufen.
+
+- Steht @Lazy an eine @Configuration-Klasse, so ist das wie ein @Lazy an jeder @Bean-Methode (gilt für alle dazugehörigen
+Beans).
+- Falls ich zum Beispiel den Quellcode nicht habe und an bestimmte Komponenten nicht drankomme, so kann ich die
+Annotation @Lazy auch an @Autowired oder @Inject anhängen. Auch dann wird die Komponente verzögert initialisiert.
+    - Intern setzt Spring dafür einen Proxy ein, um herauszufinden, ob es dafür einen ersten Zugriff gab.
+
+Globale verzögerte Initialisierung
+- @Lazy funktioniert lokal bei der jeweiligen annotierten Komponente, jedoch gibt es eine Möglichkeit global alles auf
+lazy zu setzen:
+- Spring Boot bietet eine Konfigurations-Property, die alles lazy macht:
+spring.main.lazy-initialization auf true setzen.
+
+- Die verzögerte Initialisierung kann auch programmatisch gesetzt werden:
+    - SpringApplication:setLazyInitialization(true)
+    - SpringApplicationBuilders:lazyInitialization(true)
+
+- Die verzögerte Initialisierung lässt sich dann wieder für bestimmte Spring-managed Beans mit @Lazy(false) deaktivieren.
+    - Das gilt auch, wenn @Lazy an der @Configuration steht.
+
+
+Bean-Initialisierung traditionell
+Eine Spring-managed Bean ist eine übliche Java-Klasse mit typischer Initialisierung:
+1. Bei einem new reserviert die JVM Speicher für die Objektvariablen.
+2. Klassen-/Objektvariablen werden genullt (besitzen noch keinen Wert).
+3. Der Konstruktor der Oberklasse wird durch super() aufgerufen.
+4. Der Konstruktor initialisiert die Objektvariablen.
+
+In Spring haben die Objekte einen deutlich komplexeren Lebenszyklus.
+
+Folgendes Beispiel zeigt die Abfolge der Initialisierung bei Spring:
+@ShellComponent
+public class FsCommands {
+    private final Logger log = LoggerFactory.getLogger( getClass() );
+
+    @Autowired private FileSystem fs;
+
+    public FsCommands {
+        if (fs.getFreeDiskSpace() < 1_000_000 )
+            log.info( "Low disk space!" );
+    }
+    // ...
+}
+Was wird passieren?
+-> Es erfolgt ein Fehler (NullPointerException).
+- Es werden erst die Objekte per Konstruktor aufgebaut.
+- Erst später erfolgt der Aufbau der Komponenten per Autowired. Daher kann der Konstruktor noch nicht auf die Variable
+fs zugreifen, da sie per Autowired erst später aufgebaut wird.
+-> Constructor-Injection könnte das Problem lösen.
+
+Bean-Initialisierung bei Spring
+Bei der Initialisierung gibt es eine Reihenfolge:
+1. Spring baut das Objekt über den Konstruktor auf.
+2. Danach wird die Injizierung vorgenommen.
+
+
+Lifecycle Callbacks
+Eine Bean kann einen Lebenszyklus haben, der vom Container betrachtet wird.
+- Beim Erzeugen kann man eine eigene Initialisierung laufen lassen, beim Entfernen der Spring-managed Bean aus dem
+Kontext eine Abräumoperation.
+- Das sind spezielle Methoden, die beim Aufbau der Komponente aufgerufen werden können.
+
+
+@PostConstruct und @PreDestroy
+Spring unterstützt die Lebenszyklus-Annotationen @PostConstruct und @PreDestroy.
+- Spring Boot referenziert die Jakarta Annotations API über die Maven Dependency javax.annotation:javax.annotation-api.
+
+- @PostConstruct: Wird für eine Methode verwendet, die nach der Dependency-Injection aufgerufen wird, um eine
+Initialisierung durchzuführen.
+- @PreDestroy: Wird für Methoden verwendet, die im Allgemeinen Ressourcen freigeben, bevor die Spring-managed Bean
+vom Container entfernt wird.
+Diese Methoden:
+- haben keine Parameter
+- sind Objektmethoden (nicht statisch)
+- liefern nichts zurück, void
+- lösen keine geprüften Ausnahmen aus
+- können beliebige Sichtbarkeiten haben
+
+
+Vorheriges Beispiel mit @PostConstruct
+@ShellComponent
+public class FsCommands {
+    private final Logger log = LoggerFactory.getLogger( getClass() );
+
+    @Autowired private FileSystem fs;
+
+    @PostConstruct
+    public void checkDiskSpace() {
+        if (fs.getFreeDiskSpace() < 1_000_000 )
+            log.info( "Low disk space!" );
+    }
+    // ...
+}
+Diesmal wird anstatt des Konstruktors eine Methode für die Überprüfung des Speicherplatzes genutzt, welche die
+Annotation @PostConstruct nutzt.
+Da diese Methode durch @PostConstruct erst nach @Autowired aufgerufen wird, kann die Methode von fs nun aufgerufen
+werden.
+
+-> Diese @PostConstruct ist in einigen Fällen ungünstig, wenn ich z.B. diese Komponente teste, dann stellt sich die
+Frage, ob diese @PostConstruct Methode von uns manuell aufgerufen werden muss oder nicht, weil sie vielleicht nur ein
+Extra ist.
+-> Deshalb wird allgemein nicht mit @PostConstruct gearbeitet, sondern würde in dem Fall lieber Constructor-Injection
+zur Injizierung des FileSystem nutzen.
+
+Es gibt gewisse Anwendungsfälle, bei denen @PostConstructor Sinn machen kann.
+
+
+@PreDestroy
+Diese Methode wird immer dann ausgeführt, wenn der Container diese gewählte Komponente entfernen möchte.
+Dann kann auch ein Lebenszyklus Callback registriert werden.
+Technisch funktioniert das mit sogenannten Shutdown-Hooks. Sie lassen sich mit runnable anmelden und darüber kann man
+dann beliebigen Programmcode abarbeiten lassen, wenn die Virtual Machine korrekt herunterfährt.
+Spring meldet automatisch einen Shutdown-Hook an und dort laufen dann solche Abräumarbeiten (Callbacks) mit @PreDestroy.
+-> Das heißt also, dass wir damit eine Methode annotieren können, die ganz zum Schluss ausgeführt werden soll, bevor
+diese Bean zerstört wird.
+
+
+Beide Methoden @PostConstruct und @PreDestroy können vererbt werden oder von Schnittstellen implementiert werden.
+
+
+Früher, vor etwa 10 Jahren, gab es noch keine @PostConstruct und @PreDestroy Annotationen, daher wurden dafür bestimmte
+Schnittstellen genutzt:
+- InitializingBean und DisposableBean
+Da diese Art und Weise heute veraltet ist und nicht mehr genutzt wird, werde ich mir die Erklärung hier sparen.
+(Kurs: Kapitel 25 Bonus: Lebenszyklus der Beans Teil 2)
+
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/LowDiskSpaceCondition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/LowDiskSpaceCondition.java b/Date4u/src/main/java/com/udemy/date4u/Tutorial/LowDiskSpaceCondition.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/LowDiskSpaceCondition.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,17 @@
+package com.udemy.date4u.Tutorial;
+
+import org.springframework.context.annotation.Condition;
+import org.springframework.context.annotation.ConditionContext;
+import org.springframework.core.type.AnnotatedTypeMetadata;
+import org.springframework.util.unit.DataSize;
+
+import java.io.File;
+
+public class LowDiskSpaceCondition implements Condition {
+    @Override
+    public boolean matches( ConditionContext __, AnnotatedTypeMetadata ___ ) {  // Da wir die beiden Parameter nicht
+        // brauchen, markieren wir sie provisorisch mit "__" und nutzen sie nicht.
+        return DataSize.ofBytes(new File("C:/").getFreeSpace()).toGigabytes() < 10;
+    }
+}
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Singleton und Prototyp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Singleton und Prototyp b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Singleton und Prototyp
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Singleton und Prototyp	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,22 @@
+Singleton/Prototyp zustands-los oder -behaftet
+
+- Die Komponenten bei Spring Boot sind sogenannte Singletons. Singletons sind Objekte, die nur ein einziges Mal im
+Framework existieren.
+- Ein Prototyp wird erst dann erzeugt, wenn er gebraucht wird. Wenn eine neue Anfrage erteilt wird, dann wird auch ein
+neuer Prototyp aufgebaut.
+
+Beispiel: mehrere Benutzer auf einem Webserver brauchen einen eigenen Warenkorb.
+- Dafür muss ich jedem einzelnen Benutzer einen eigenen Warenkorb zuordnen. Somit gibt es mehrere gleiche Objekte
+-> Prototyp.
+
+- Am besten sind Singletons immer immutable (Zustand nicht veränderbar).
+    - Immutable Klassen sind immer Thread-sicher.
+    - Wenn es mutable Zustände gibt, muss auf jeden Fall auf Thread-Sicherheit geachtet werden.
+    -> Es könnte passieren, dass mehrere Threads auf einen Singleton zugreifen und dann muss man aufpassen, dass diese
+    Komponente sich nicht irgendwelche internen Zustände merkt, die dann von einem anderen Thread direkt überschrieben
+    werden. Daher ist allgemein von veränderbaren Zuständen bei Singletons abzuraten.
+
+- Ein Prototyp kann zustandsbehaftet (mutable) sein, da das Objekt nicht geteilt wird.
+    - Der Status ist individuell für jeden Client.
+    - Mögliches Problem: Wenn es gemeinsame Zustände über statische Variablen gibt. Das ist ein spezieller seltener Fall.
+
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Boot Prinzip
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Boot Prinzip b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Boot Prinzip
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Boot Prinzip	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,34 @@
+Spring Boot Prinzip
+
+- Anstatt über die hierarchische Methode im klassischen Java Stil Klassen aufzubauen (Implementierungen, Vererbungen..),
+arbeitet Spring Boot mit Dependency Injection.
+- Die Abhängigkeiten werden mit Dependency Injection automatisch erzeugt.
+- In der Main Klasse und main Methode steht der "ApplicationContext". Dieser Application Context erzeugt beim Start
+des Programms die Instanzen aller Klassen. Er ist eine zentrale Komponente, die für die Verwaltung von Spring Beans und
+deren Lebenszyklen in der Anwendung verantwortlich ist.
+
+Aufgaben von ApplicationContext:
+- Bean Verwaltung: verwaltet Beans, die Java-Objekte sind und die Bausteine einer Spring-Anwendung bilden. Spring Boot
+scannt automatisch nach Komponenten, Services, Repositories und anderen Beans und macht sie für die Abhängigkeiten
+verfügbar.
+- Auto-Konfiguration: hilft Anwendungskomponenten automatisch zu konfigurieren, basierend auf vorhandenen Bibliotheken,
+JAR-Dateien oder Eigenschaften. Das erleichtert die Einrichtung einer Spring-Boot-Anwendung ohne umfangreiche
+Konfiguration.
+- Eigenschaftsauflösung: App.Cont. kann Anwendungseigenschaften und Konfigurationen aus verschiedenen Quellen auflösen,
+wie z.B. application.properties, application.yml, Befehlszeilenargumente, Umgebungsvariablen und Systemeigenschaften.
+Diese Eigenschaften können einfach in Beans mithilfe der @Value-Annotation injiziert werden.
+- Komponentenscan: verwendet den Komponentenscan, um Komponenten wie Controller, Services, Repositories etc. zu
+entdecken und zu registrieren. Dies eliminiert die Notwendigkeit für umfangreiche XML-Konfigurationen und vereinfacht
+die Einrichtung von Spring-basierten Anwendungen.
+- Profilverwaltung: Je nach Profil (Entwicklung, Test, Produktion) unterschiedlich konfiguriert.
+- Konfiguration der Umgebung: weitere Konfigurationen... (erstmal nicht so wichtig alles zu wissen).
+- Externe Konfiguration: ...
+- Abhängigkeitsinjektion: ist verantwortlich die Abhängigkeitsinjektion durchzuführen, Abhängigkeiten aufzulösen und
+den Objektgraphen der Anwendung zu erstellen.
+
+n einer Spring-Boot-Anwendung müssen Sie den ApplicationContext normalerweise nicht manuell erstellen. Er wird vom
+Spring-Boot-Framework erstellt und verwaltet. Sie können auf den ApplicationContext zugreifen, indem Sie ihn bei Bedarf
+in Ihre Klassen injizieren, indem Sie das Interface org.springframework.context.ApplicationContext verwenden:
+
+@Autowired
+private ApplicationContext applicationContext;
Index: Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Shell
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Shell b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Shell
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Tutorial/Spring Shell	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,20 @@
+
+Spring Shell
+Spring Shell ist ein externes Package und muss zusätzlich in der xml Datei eingebunden werden:
+
+    <properties>
+        <java.version>17</java.version>
+        <spring-shell.version>3.1.3</spring-shell.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.shell</groupId>
+            <artifactId>spring-shell-starter</artifactId>
+            <version>${spring-shell.version}</version>
+        </dependency>
+    </dependencies>
+
+
+Wenn wir das Programm starten, wird die Shell in der Konsole geöffnet.
+Mit "help" können wir Hilfe zu verschiedenen Befehlen erhalten.
+
Index: Date4u/src/main/java/com/udemy/date4u/AppUuidConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/AppUuidConfig.java b/Date4u/src/main/java/com/udemy/date4u/AppUuidConfig.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/AppUuidConfig.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,41 @@
+package com.udemy.date4u;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import java.util.UUID;
+
+// Erstes Beispiel für eine Bean-Factory:
+// 1. Fabrik-Klasse mit @Configuration annotieren:
+@Configuration
+public class AppUuidConfig {
+
+    private final Logger log = LoggerFactory.getLogger( getClass() );
+
+    // 2. Eine Methode mit @Bean annotieren:
+    @Bean
+    String appUuid() {
+        String uuid = UUID.randomUUID().toString();
+        log.info( "uuid -> {}", uuid );
+        return uuid;
+    }
+
+    // Wir generieren eine zweite Bean, die jedoch die appUuid Methode vom oberen Bean nochmal anwendet.
+    // Wir schauen mal was dabei rauskommt:
+    @Bean
+    String shorterAppUuid() {
+        String uuid = appUuid().substring(0, appUuid().length() / 2 );
+        log.info( "uuid -> {}", uuid );
+        return uuid;
+        // Wir haben in der Konsole die Log-Ausgabe beim Start gesehen, dass genau der gleiche Algorithmus wiedergegeben
+        // wurde, nur um die Hälfte gekürzt.
+        // Beim ClassObjekt wird im Log nicht die Klasse AppUuidConfig angezeigt, sondern ein Stellvertreter, ein
+        // Proxy-Objekt. Spring baut eine Unterklasse von AppUuidConfig, überschreibt diese Methoden und wenn die
+        // Methoden mehrfach aufgerufen werden, dann wird immer dieselbe Instanz zurückgegeben.
+        // Der Proxy lässt sich auch deaktivieren, indem man oben neben @Configuration schreibt:
+        // @Configuration(proxyBeanMethods = false)
+    }
+
+}
Index: Date4u/src/main/java/com/udemy/date4u/Date4uApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/main/java/com/udemy/date4u/Date4uApplication.java b/Date4u/src/main/java/com/udemy/date4u/Date4uApplication.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/java/com/udemy/date4u/Date4uApplication.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,25 @@
+package com.udemy.date4u;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ApplicationContext;
+
+@SpringBootApplication
+public class Date4uApplication {
+
+    public static void main(String[] args) {
+        ApplicationContext ctx = SpringApplication.run(Date4uApplication.class, args);
+
+        for (String name : ctx.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+
+
+        // Wir können aus ctx direkt unsere FileSystem Klasse herausholen.
+        // mit getBean rufen wir unsere Klasse auf und speichern sie in fileSystem.
+        // FileSystem fileSystem = ctx.getBean(FileSystem.class);
+        // Nun können wir mit der Variable z.B. die Methode getFreeDiskSpace() aufrufen.
+        // Die Methode DataSize wandelt die Bytes um, toGigabyte gibt die Größe in Gigabyte aus.
+        //System.out.printf("%d GB%n", DataSize.ofBytes(fileSystem.getFreeDiskSpace()).toGigabytes());
+    }
+}
\ No newline at end of file
Index: Date4u/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/Date4u/src/main/resources/application.properties b/Date4u/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/main/resources/application.properties	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,2 @@
+spring.main.banner-mode=off
+#date4u.filesystem.minimum-free-disk-space=1000000
\ No newline at end of file
Index: Date4u/src/test/java/com/udemy/date4u/Date4uApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/src/test/java/com/udemy/date4u/Date4uApplicationTests.java b/Date4u/src/test/java/com/udemy/date4u/Date4uApplicationTests.java
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/src/test/java/com/udemy/date4u/Date4uApplicationTests.java	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,13 @@
+package com.udemy.date4u;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class Date4uApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: Date4u/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/.gitignore b/Date4u/.gitignore
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/.gitignore	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: Date4u/mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/mvnw b/Date4u/mvnw
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/mvnw	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,308 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.2.0
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "$(uname)" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        JAVA_HOME="$(/usr/libexec/java_home)"; export JAVA_HOME
+      else
+        JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=$(java-config --jre-home)
+  fi
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --unix "$CLASSPATH")
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ] &&
+    JAVA_HOME="$(cd "$JAVA_HOME" || (echo "cannot cd into $JAVA_HOME."; exit 1); pwd)"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="$(which javac)"
+  if [ -n "$javaExecutable" ] && ! [ "$(expr "\"$javaExecutable\"" : '\([^ ]*\)')" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=$(which readlink)
+    if [ ! "$(expr "$readLink" : '\([^ ]*\)')" = "no" ]; then
+      if $darwin ; then
+        javaHome="$(dirname "\"$javaExecutable\"")"
+        javaExecutable="$(cd "\"$javaHome\"" && pwd -P)/javac"
+      else
+        javaExecutable="$(readlink -f "\"$javaExecutable\"")"
+      fi
+      javaHome="$(dirname "\"$javaExecutable\"")"
+      javaHome=$(expr "$javaHome" : '\(.*\)/bin')
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="$(\unset -f command 2>/dev/null; \command -v java)"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=$(cd "$wdir/.." || exit 1; pwd)
+    fi
+    # end of workaround
+  done
+  printf '%s' "$(cd "$basedir" || exit 1; pwd)"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    # Remove \r in case we run on Windows within Git Bash
+    # and check out the repository with auto CRLF management
+    # enabled. Otherwise, we may read lines that are delimited with
+    # \r\n and produce $'-Xarg\r' rather than -Xarg due to word
+    # splitting rules.
+    tr -s '\r\n' ' ' < "$1"
+  fi
+}
+
+log() {
+  if [ "$MVNW_VERBOSE" = true ]; then
+    printf '%s\n' "$1"
+  fi
+}
+
+BASE_DIR=$(find_maven_basedir "$(dirname "$0")")
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}; export MAVEN_PROJECTBASEDIR
+log "$MAVEN_PROJECTBASEDIR"
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+wrapperJarPath="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
+if [ -r "$wrapperJarPath" ]; then
+    log "Found $wrapperJarPath"
+else
+    log "Couldn't find $wrapperJarPath, downloading it ..."
+
+    if [ -n "$MVNW_REPOURL" ]; then
+      wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    else
+      wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    fi
+    while IFS="=" read -r key value; do
+      # Remove '\r' from value to allow usage on windows as IFS does not consider '\r' as a separator ( considers space, tab, new line ('\n'), and custom '=' )
+      safeValue=$(echo "$value" | tr -d '\r')
+      case "$key" in (wrapperUrl) wrapperUrl="$safeValue"; break ;;
+      esac
+    done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+    log "Downloading from: $wrapperUrl"
+
+    if $cygwin; then
+      wrapperJarPath=$(cygpath --path --windows "$wrapperJarPath")
+    fi
+
+    if command -v wget > /dev/null; then
+        log "Found wget ... using wget"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--quiet"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget $QUIET "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        log "Found curl ... using curl"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--silent"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        else
+            curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        fi
+    else
+        log "Falling back to using Java to download"
+        javaSource="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        javaClass="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaSource=$(cygpath --path --windows "$javaSource")
+          javaClass=$(cygpath --path --windows "$javaClass")
+        fi
+        if [ -e "$javaSource" ]; then
+            if [ ! -e "$javaClass" ]; then
+                log " - Compiling MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/javac" "$javaSource")
+            fi
+            if [ -e "$javaClass" ]; then
+                log " - Running MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$wrapperUrl" "$wrapperJarPath") || rm -f "$wrapperJarPath"
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+# If specified, validate the SHA-256 sum of the Maven wrapper jar file
+wrapperSha256Sum=""
+while IFS="=" read -r key value; do
+  case "$key" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;
+  esac
+done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+if [ -n "$wrapperSha256Sum" ]; then
+  wrapperSha256Result=false
+  if command -v sha256sum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | sha256sum -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  elif command -v shasum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | shasum -a 256 -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available."
+    echo "Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties."
+    exit 1
+  fi
+  if [ $wrapperSha256Result = false ]; then
+    echo "Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised." >&2
+    echo "Investigate or delete $wrapperJarPath to attempt a clean download." >&2
+    echo "If you updated your Maven version, you need to update the specified wrapperSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --path --windows "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --windows "$CLASSPATH")
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $*"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+# shellcheck disable=SC2086 # safe args
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
Index: Date4u/mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/mvnw.cmd b/Date4u/mvnw.cmd
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/mvnw.cmd	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,205 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.2.0
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %WRAPPER_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
+SET WRAPPER_SHA_256_SUM=""
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperSha256Sum" SET WRAPPER_SHA_256_SUM=%%B
+)
+IF NOT %WRAPPER_SHA_256_SUM%=="" (
+    powershell -Command "&{"^
+       "$hash = (Get-FileHash \"%WRAPPER_JAR%\" -Algorithm SHA256).Hash.ToLower();"^
+       "If('%WRAPPER_SHA_256_SUM%' -ne $hash){"^
+       "  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';"^
+       "  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';"^
+       "  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';"^
+       "  exit 1;"^
+       "}"^
+       "}"
+    if ERRORLEVEL 1 goto error
+)
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
Index: Date4u/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/pom.xml b/Date4u/pom.xml
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/pom.xml	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>3.1.4</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>com.udemy</groupId>
+    <artifactId>Date4u</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>Date4u</name>
+    <description>Date4u</description>
+    <properties>
+        <java.version>17</java.version>
+        <spring-shell.version>3.1.3</spring-shell.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.shell</groupId>
+            <artifactId>spring-shell-starter</artifactId>
+            <version>${spring-shell.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <annotationProcessorPaths>
+                        <path>
+                            <groupId>org.springframework.boot</groupId>
+                            <artifactId>spring-boot-configuration-processor</artifactId>
+                            <version>${project.parent.version}</version>
+                        </path>
+                    </annotationProcessorPaths>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
Index: Date4u/spring-shell.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Date4u/spring-shell.log b/Date4u/spring-shell.log
new file mode 100644
--- /dev/null	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
+++ b/Date4u/spring-shell.log	(revision d003b93cd28c3aa4bc506bad2eea4db7ee7d65b1)
@@ -0,0 +1,38 @@
+1696443026260:help
+1696443057934:exit
+1696444034819:help
+1696444072121:minimum-free-disk-space
+1696444102909:hallo
+1696444110780:to-lowercase Hallo Welt
+1696444183351:to-lowercase 'Hallo Welt'
+1696444208740:to-lowercase "hallo Welt Hi"
+1696444215096:exit
+1696444831577:help
+1696444844060:minimum-free-disk-space
+1696444856355:free-disk-space
+1696445525009:exit
+1696498356454:help
+1696498359304:exit
+1696706471876:help
+1696706486138:show-photo unicorn001
+1696706598938:show-photo unicorn002
+1696706618152:show-photo unicorn001
+1696706639073:show-photo unicorn005
+1698311532154:exit
+1698433225277:show-photo unicorn001
+1698433232466:help
+1698433296377:exit
+1698697327453:help
+1698697335467:exit
+1698928116792:upload-photo
+1698928182448:upload-photo '/home/raphael/Bilder/Gustav Pressbacken/20200421_alle Pressbacken.jpg'
+1698928334932:exit
+1699983467089:help
+1699983476727:user-home
+1699992082241:help
+1699992093113:minimum-free-disk-space
+1700235788211:help
+1700235795931:minimum-free-disk-space
+1700235798705:exit
+1700239254965:minimum-free-disk-space
+1700239392086:exit
diff --git a/Date4u/.mvn/wrapper/maven-wrapper.jar b/Date4u/.mvn/wrapper/maven-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..cb28b0e37c7d206feb564310fdeec0927af4123a
GIT binary patch
literal 62547
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
b_49{|xgB~}0Tu035d!~x4+q;$pC0`m*U2I8

