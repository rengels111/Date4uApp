Spring Boot Prinzip

- Anstatt über die hierarchische Methode im klassischen Java Stil Klassen aufzubauen (Implementierungen, Vererbungen..),
arbeitet Spring Boot mit Dependency Injection.
- Die Abhängigkeiten werden mit Dependency Injection automatisch erzeugt.
- In der Main Klasse und main Methode steht der "ApplicationContext". Dieser Application Context erzeugt beim Start
des Programms die Instanzen aller Klassen. Er ist eine zentrale Komponente, die für die Verwaltung von Spring Beans und
deren Lebenszyklen in der Anwendung verantwortlich ist.

Aufgaben von ApplicationContext:
- Bean Verwaltung: verwaltet Beans, die Java-Objekte sind und die Bausteine einer Spring-Anwendung bilden. Spring Boot
scannt automatisch nach Komponenten, Services, Repositories und anderen Beans und macht sie für die Abhängigkeiten
verfügbar.
- Auto-Konfiguration: hilft Anwendungskomponenten automatisch zu konfigurieren, basierend auf vorhandenen Bibliotheken,
JAR-Dateien oder Eigenschaften. Das erleichtert die Einrichtung einer Spring-Boot-Anwendung ohne umfangreiche
Konfiguration.
- Eigenschaftsauflösung: App.Cont. kann Anwendungseigenschaften und Konfigurationen aus verschiedenen Quellen auflösen,
wie z.B. application.properties, application.yml, Befehlszeilenargumente, Umgebungsvariablen und Systemeigenschaften.
Diese Eigenschaften können einfach in Beans mithilfe der @Value-Annotation injiziert werden.
- Komponentenscan: verwendet den Komponentenscan, um Komponenten wie Controller, Services, Repositories etc. zu
entdecken und zu registrieren. Dies eliminiert die Notwendigkeit für umfangreiche XML-Konfigurationen und vereinfacht
die Einrichtung von Spring-basierten Anwendungen.
- Profilverwaltung: Je nach Profil (Entwicklung, Test, Produktion) unterschiedlich konfiguriert.
- Konfiguration der Umgebung: weitere Konfigurationen... (erstmal nicht so wichtig alles zu wissen).
- Externe Konfiguration: ...
- Abhängigkeitsinjektion: ist verantwortlich die Abhängigkeitsinjektion durchzuführen, Abhängigkeiten aufzulösen und
den Objektgraphen der Anwendung zu erstellen.

n einer Spring-Boot-Anwendung müssen Sie den ApplicationContext normalerweise nicht manuell erstellen. Er wird vom
Spring-Boot-Framework erstellt und verwaltet. Sie können auf den ApplicationContext zugreifen, indem Sie ihn bei Bedarf
in Ihre Klassen injizieren, indem Sie das Interface org.springframework.context.ApplicationContext verwenden:

@Autowired
private ApplicationContext applicationContext;
