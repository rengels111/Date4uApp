@Import Annotation

Mit der @Import Annotation kann ich Klassen in andere @Configuration-Typen importieren.

@Component
class Water {}

@Configuration
class CoffeeBeansConfig {
    @Bean public CoffeeBeans beans() { ... }

@Configuration
@Import( { Water.class, CoffeeBeansConfig.class } )
class CoffeeConfig {
    @Bean public Coffee coffee( CoffeeBeans bean ) { ... }
}

Das ist normalerweise unnötig, da Classpath-Scanning sowieso alle Klassen scannt und sie hinzufügt, jedoch ist dies
in den folgenden Fällen sinnvoll:
- Eine Konfiguration soll eingebunden werden, welche sich in einer anderen Hierarchie, einem anderen Package befindet
und das Classpath-Scanning darauf nicht zugreifen kann, da diese Konfigurationen außerhalb des konfigurierten Suchphades
des Classpath-Scannings liegen.
- Oder wenn Classpath-Scanning ausgeschaltet ist.

-> Damit kann man sogar auf das Classpath-Scanning verzichten. Falls ich nicht alle Typen brauche sondern nur bestimmte
Typen, dann könnte ich mit Import alle Konfigurationstypen sammeln und dem Framework sagen welche Typen wir explizit
für diese Anwendung brauchen.


ImportSelector
Ein ImportSelector enthält eine Logik, die zur Laufzeit entscheiden kann welche vollqualifizierten Typen für eine
@Configuration geliefert werden sollen. Es ist ähnlich wie bei einer Fabrikmethode, wo zur Laufzeit entschieden
werden kann welche Beans erzeugt werden sollen.